[{"E:\\blockchain_project\\nft_marketplace\\src\\index.js":"1","E:\\blockchain_project\\nft_marketplace\\src\\serviceWorker.js":"2","E:\\blockchain_project\\nft_marketplace\\src\\frontend\\components\\App.js":"3","E:\\blockchain_project\\nft_marketplace\\src\\frontend\\components\\Create.js":"4","E:\\blockchain_project\\nft_marketplace\\src\\frontend\\components\\MyListedItems.js":"5","E:\\blockchain_project\\nft_marketplace\\src\\frontend\\components\\Home.js":"6","E:\\blockchain_project\\nft_marketplace\\src\\frontend\\components\\MyPurchases.js":"7","E:\\blockchain_project\\nft_marketplace\\src\\frontend\\components\\Navbar.js":"8"},{"size":504,"mtime":1653228665008,"results":"9","hashOfConfig":"10"},{"size":5086,"mtime":1653228665008,"results":"11","hashOfConfig":"10"},{"size":3042,"mtime":1653228664991,"results":"12","hashOfConfig":"10"},{"size":2942,"mtime":1653242995022,"results":"13","hashOfConfig":"10"},{"size":3123,"mtime":1653228664991,"results":"14","hashOfConfig":"10"},{"size":2826,"mtime":1653228664991,"results":"15","hashOfConfig":"10"},{"size":2371,"mtime":1653228664991,"results":"16","hashOfConfig":"10"},{"size":1956,"mtime":1653263350870,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"8epxg",{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33"},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37"},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"E:\\blockchain_project\\nft_marketplace\\src\\index.js",[],[],"E:\\blockchain_project\\nft_marketplace\\src\\serviceWorker.js",[],[],"E:\\blockchain_project\\nft_marketplace\\src\\frontend\\components\\App.js",[],[],"E:\\blockchain_project\\nft_marketplace\\src\\frontend\\components\\Create.js",[],[],"E:\\blockchain_project\\nft_marketplace\\src\\frontend\\components\\MyListedItems.js",["45"],[],"import { useState, useEffect } from 'react'\r\nimport { ethers } from \"ethers\"\r\nimport { Row, Col, Card } from 'react-bootstrap'\r\n\r\nfunction renderSoldItems(items) {\r\n  return (\r\n    <>\r\n      <h2>Sold</h2>\r\n      <Row xs={1} md={2} lg={4} className=\"g-4 py-3\">\r\n        {items.map((item, idx) => (\r\n          <Col key={idx} className=\"overflow-hidden\">\r\n            <Card>\r\n              <Card.Img variant=\"top\" src={item.image} />\r\n              <Card.Footer>\r\n                For {ethers.utils.formatEther(item.totalPrice)} ETH - Recieved {ethers.utils.formatEther(item.price)} ETH\r\n              </Card.Footer>\r\n            </Card>\r\n          </Col>\r\n        ))}\r\n      </Row>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default function MyListedItems({ marketplace, nft, account }) {\r\n  const [loading, setLoading] = useState(true)\r\n  const [listedItems, setListedItems] = useState([])\r\n  const [soldItems, setSoldItems] = useState([])\r\n  const loadListedItems = async () => {\r\n    // Load all sold items that the user listed\r\n    const itemCount = await marketplace.itemCount()\r\n    let listedItems = []\r\n    let soldItems = []\r\n    for (let indx = 1; indx <= itemCount; indx++) {\r\n      const i = await marketplace.items(indx)\r\n      if (i.seller.toLowerCase() === account) {\r\n        // get uri url from nft contract\r\n        const uri = await nft.tokenURI(i.tokenId)\r\n        // use uri to fetch the nft metadata stored on ipfs \r\n        const response = await fetch(uri)\r\n        const metadata = await response.json()\r\n        // get total price of item (item price + fee)\r\n        const totalPrice = await marketplace.getTotalPrice(i.itemId)\r\n        // define listed item object\r\n        let item = {\r\n          totalPrice,\r\n          price: i.price,\r\n          itemId: i.itemId,\r\n          name: metadata.name,\r\n          description: metadata.description,\r\n          image: metadata.image\r\n        }\r\n        listedItems.push(item)\r\n        // Add listed item to sold items array if sold\r\n        if (i.sold) soldItems.push(item)\r\n      }\r\n    }\r\n    setLoading(false)\r\n    setListedItems(listedItems)\r\n    setSoldItems(soldItems)\r\n  }\r\n  useEffect(() => {\r\n    loadListedItems()\r\n  }, [])\r\n  if (loading) return (\r\n    <main style={{ padding: \"1rem 0\" }}>\r\n      <h2>Loading...</h2>\r\n    </main>\r\n  )\r\n  return (\r\n    <div className=\"flex justify-center\">\r\n      {listedItems.length > 0 ?\r\n        <div className=\"px-5 py-3 container\">\r\n            <h2>Listed</h2>\r\n          <Row xs={1} md={2} lg={4} className=\"g-4 py-3\">\r\n            {listedItems.map((item, idx) => (\r\n              <Col key={idx} className=\"overflow-hidden\">\r\n                <Card>\r\n                  <Card.Img variant=\"top\" src={item.image} />\r\n                  <Card.Footer>{ethers.utils.formatEther(item.totalPrice)} ETH</Card.Footer>\r\n                </Card>\r\n              </Col>\r\n            ))}\r\n          </Row>\r\n            {soldItems.length > 0 && renderSoldItems(soldItems)}\r\n        </div>\r\n        : (\r\n          <main style={{ padding: \"1rem 0\" }}>\r\n            <h2>No listed assets</h2>\r\n          </main>\r\n        )}\r\n    </div>\r\n  );\r\n}","E:\\blockchain_project\\nft_marketplace\\src\\frontend\\components\\Home.js",["46"],[],"import { useState, useEffect } from 'react'\r\nimport { ethers } from \"ethers\"\r\nimport { Row, Col, Card, Button } from 'react-bootstrap'\r\n\r\nconst Home = ({ marketplace, nft }) => {\r\n  const [loading, setLoading] = useState(true)\r\n  const [items, setItems] = useState([])\r\n  const loadMarketplaceItems = async () => {\r\n    // Load all unsold items\r\n    const itemCount = await marketplace.itemCount()\r\n    let items = []\r\n    for (let i = 1; i <= itemCount; i++) {\r\n      const item = await marketplace.items(i)\r\n      if (!item.sold) {\r\n        // get uri url from nft contract\r\n        const uri = await nft.tokenURI(item.tokenId)\r\n        // use uri to fetch the nft metadata stored on ipfs \r\n        const response = await fetch(uri)\r\n        const metadata = await response.json()\r\n        // get total price of item (item price + fee)\r\n        const totalPrice = await marketplace.getTotalPrice(item.itemId)\r\n        // Add item to items array\r\n        items.push({\r\n          totalPrice,\r\n          itemId: item.itemId,\r\n          seller: item.seller,\r\n          name: metadata.name,\r\n          description: metadata.description,\r\n          image: metadata.image\r\n        })\r\n      }\r\n    }\r\n    setLoading(false)\r\n    setItems(items)\r\n  }\r\n\r\n  const buyMarketItem = async (item) => {\r\n    await (await marketplace.purchaseItem(item.itemId, { value: item.totalPrice })).wait()\r\n    loadMarketplaceItems()\r\n  }\r\n\r\n  useEffect(() => {\r\n    loadMarketplaceItems()\r\n  }, [])\r\n  if (loading) return (\r\n    <main style={{ padding: \"1rem 0\" }}>\r\n      <h2>Loading...</h2>\r\n    </main>\r\n  )\r\n  return (\r\n    <div className=\"flex justify-center\">\r\n      {items.length > 0 ?\r\n        <div className=\"px-5 container\">\r\n          <Row xs={1} md={2} lg={4} className=\"g-4 py-5\">\r\n            {items.map((item, idx) => (\r\n              <Col key={idx} className=\"overflow-hidden\">\r\n                <Card>\r\n                  <Card.Img variant=\"top\" src={item.image} />\r\n                  <Card.Body color=\"secondary\">\r\n                    <Card.Title>{item.name}</Card.Title>\r\n                    <Card.Text>\r\n                      {item.description}\r\n                    </Card.Text>\r\n                  </Card.Body>\r\n                  <Card.Footer>\r\n                    <div className='d-grid'>\r\n                      <Button onClick={() => buyMarketItem(item)} variant=\"primary\" size=\"lg\">\r\n                        Buy for {ethers.utils.formatEther(item.totalPrice)} ETH\r\n                      </Button>\r\n                    </div>\r\n                  </Card.Footer>\r\n                </Card>\r\n              </Col>\r\n            ))}\r\n          </Row>\r\n        </div>\r\n        : (\r\n          <main style={{ padding: \"1rem 0\" }}>\r\n            <h2>No listed assets</h2>\r\n          </main>\r\n        )}\r\n    </div>\r\n  );\r\n}\r\nexport default Home","E:\\blockchain_project\\nft_marketplace\\src\\frontend\\components\\MyPurchases.js",["47"],[],"import { useState, useEffect } from 'react'\r\nimport { ethers } from \"ethers\"\r\nimport { Row, Col, Card } from 'react-bootstrap'\r\n\r\nexport default function MyPurchases({ marketplace, nft, account }) {\r\n  const [loading, setLoading] = useState(true)\r\n  const [purchases, setPurchases] = useState([])\r\n  const loadPurchasedItems = async () => {\r\n    // Fetch purchased items from marketplace by quering Offered events with the buyer set as the user\r\n    const filter =  marketplace.filters.Bought(null,null,null,null,null,account)\r\n    const results = await marketplace.queryFilter(filter)\r\n    //Fetch metadata of each nft and add that to listedItem object.\r\n    const purchases = await Promise.all(results.map(async i => {\r\n      // fetch arguments from each result\r\n      i = i.args\r\n      // get uri url from nft contract\r\n      const uri = await nft.tokenURI(i.tokenId)\r\n      // use uri to fetch the nft metadata stored on ipfs \r\n      const response = await fetch(uri)\r\n      const metadata = await response.json()\r\n      // get total price of item (item price + fee)\r\n      const totalPrice = await marketplace.getTotalPrice(i.itemId)\r\n      // define listed item object\r\n      let purchasedItem = {\r\n        totalPrice,\r\n        price: i.price,\r\n        itemId: i.itemId,\r\n        name: metadata.name,\r\n        description: metadata.description,\r\n        image: metadata.image\r\n      }\r\n      return purchasedItem\r\n    }))\r\n    setLoading(false)\r\n    setPurchases(purchases)\r\n  }\r\n  useEffect(() => {\r\n    loadPurchasedItems()\r\n  }, [])\r\n  if (loading) return (\r\n    <main style={{ padding: \"1rem 0\" }}>\r\n      <h2>Loading...</h2>\r\n    </main>\r\n  )\r\n  return (\r\n    <div className=\"flex justify-center\">\r\n      {purchases.length > 0 ?\r\n        <div className=\"px-5 container\">\r\n          <Row xs={1} md={2} lg={4} className=\"g-4 py-5\">\r\n            {purchases.map((item, idx) => (\r\n              <Col key={idx} className=\"overflow-hidden\">\r\n                <Card>\r\n                  <Card.Img variant=\"top\" src={item.image} />\r\n                  <Card.Footer>{ethers.utils.formatEther(item.totalPrice)} ETH</Card.Footer>\r\n                </Card>\r\n              </Col>\r\n            ))}\r\n          </Row>\r\n        </div>\r\n        : (\r\n          <main style={{ padding: \"1rem 0\" }}>\r\n            <h2>No purchases</h2>\r\n          </main>\r\n        )}\r\n    </div>\r\n  );\r\n}","E:\\blockchain_project\\nft_marketplace\\src\\frontend\\components\\Navbar.js",["48"],[],{"ruleId":"49","severity":1,"message":"50","line":64,"column":6,"nodeType":"51","endLine":64,"endColumn":8,"suggestions":"52"},{"ruleId":"49","severity":1,"message":"53","line":44,"column":6,"nodeType":"51","endLine":44,"endColumn":8,"suggestions":"54"},{"ruleId":"49","severity":1,"message":"55","line":39,"column":6,"nodeType":"51","endLine":39,"endColumn":8,"suggestions":"56"},{"ruleId":"57","severity":1,"message":"58","line":5,"column":8,"nodeType":"59","messageId":"60","endLine":5,"endColumn":14},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'loadListedItems'. Either include it or remove the dependency array.","ArrayExpression",["61"],"React Hook useEffect has a missing dependency: 'loadMarketplaceItems'. Either include it or remove the dependency array.",["62"],"React Hook useEffect has a missing dependency: 'loadPurchasedItems'. Either include it or remove the dependency array.",["63"],"no-unused-vars","'market' is defined but never used.","Identifier","unusedVar",{"desc":"64","fix":"65"},{"desc":"66","fix":"67"},{"desc":"68","fix":"69"},"Update the dependencies array to be: [loadListedItems]",{"range":"70","text":"71"},"Update the dependencies array to be: [loadMarketplaceItems]",{"range":"72","text":"73"},"Update the dependencies array to be: [loadPurchasedItems]",{"range":"74","text":"75"},[2182,2184],"[loadListedItems]",[1471,1473],"[loadMarketplaceItems]",[1538,1540],"[loadPurchasedItems]"]