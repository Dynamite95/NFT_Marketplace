{"ast":null,"code":"import { decode as _decode } from '../decode.js';\nimport { Token, Type } from '../token.js';\nimport { decodeCodePointsArray } from '../byte-utils.js';\nimport { decodeErrPrefix } from '../common.js';\n\nclass Tokenizer {\n  constructor(data) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.pos = 0;\n    this.data = data;\n    this.options = options;\n    this.modeStack = ['value'];\n    this.lastToken = '';\n  }\n\n  done() {\n    return this.pos >= this.data.length;\n  }\n\n  ch() {\n    return this.data[this.pos];\n  }\n\n  currentMode() {\n    return this.modeStack[this.modeStack.length - 1];\n  }\n\n  skipWhitespace() {\n    let c = this.ch();\n\n    while (c === 32 || c === 9 || c === 13 || c === 10) {\n      c = this.data[++this.pos];\n    }\n  }\n\n  expect(str) {\n    if (this.data.length - this.pos < str.length) {\n      throw new Error(`${decodeErrPrefix} unexpected end of input at position ${this.pos}`);\n    }\n\n    for (let i = 0; i < str.length; i++) {\n      if (this.data[this.pos++] !== str[i]) {\n        throw new Error(`${decodeErrPrefix} unexpected token at position ${this.pos}, expected to find '${String.fromCharCode(...str)}'`);\n      }\n    }\n  }\n\n  parseNumber() {\n    const startPos = this.pos;\n    let negative = false;\n    let float = false;\n\n    const swallow = chars => {\n      while (!this.done()) {\n        const ch = this.ch();\n\n        if (chars.includes(ch)) {\n          this.pos++;\n        } else {\n          break;\n        }\n      }\n    };\n\n    if (this.ch() === 45) {\n      negative = true;\n      this.pos++;\n    }\n\n    if (this.ch() === 48) {\n      this.pos++;\n\n      if (this.ch() === 46) {\n        this.pos++;\n        float = true;\n      } else {\n        return new Token(Type.uint, 0, this.pos - startPos);\n      }\n    }\n\n    swallow([48, 49, 50, 51, 52, 53, 54, 55, 56, 57]);\n\n    if (negative && this.pos === startPos + 1) {\n      throw new Error(`${decodeErrPrefix} unexpected token at position ${this.pos}`);\n    }\n\n    if (!this.done() && this.ch() === 46) {\n      if (float) {\n        throw new Error(`${decodeErrPrefix} unexpected token at position ${this.pos}`);\n      }\n\n      float = true;\n      this.pos++;\n      swallow([48, 49, 50, 51, 52, 53, 54, 55, 56, 57]);\n    }\n\n    if (!this.done() && (this.ch() === 101 || this.ch() === 69)) {\n      float = true;\n      this.pos++;\n\n      if (!this.done() && (this.ch() === 43 || this.ch() === 45)) {\n        this.pos++;\n      }\n\n      swallow([48, 49, 50, 51, 52, 53, 54, 55, 56, 57]);\n    }\n\n    const numStr = String.fromCharCode.apply(null, this.data.subarray(startPos, this.pos));\n    const num = parseFloat(numStr);\n\n    if (float) {\n      return new Token(Type.float, num, this.pos - startPos);\n    }\n\n    if (this.options.allowBigInt !== true || Number.isSafeInteger(num)) {\n      return new Token(num >= 0 ? Type.uint : Type.negint, num, this.pos - startPos);\n    }\n\n    return new Token(num >= 0 ? Type.uint : Type.negint, BigInt(numStr), this.pos - startPos);\n  }\n\n  parseString() {\n    if (this.ch() !== 34) {\n      throw new Error(`${decodeErrPrefix} unexpected character at position ${this.pos}; this shouldn't happen`);\n    }\n\n    this.pos++;\n\n    for (let i = this.pos, l = 0; i < this.data.length && l < 65536; i++, l++) {\n      const ch = this.data[i];\n\n      if (ch === 92 || ch < 32 || ch >= 128) {\n        break;\n      }\n\n      if (ch === 34) {\n        const str = String.fromCharCode.apply(null, this.data.subarray(this.pos, i));\n        this.pos = i + 1;\n        return new Token(Type.string, str, l);\n      }\n    }\n\n    const startPos = this.pos;\n    const chars = [];\n\n    const readu4 = () => {\n      if (this.pos + 4 >= this.data.length) {\n        throw new Error(`${decodeErrPrefix} unexpected end of unicode escape sequence at position ${this.pos}`);\n      }\n\n      let u4 = 0;\n\n      for (let i = 0; i < 4; i++) {\n        let ch = this.ch();\n\n        if (ch >= 48 && ch <= 57) {\n          ch -= 48;\n        } else if (ch >= 97 && ch <= 102) {\n          ch = ch - 97 + 10;\n        } else if (ch >= 65 && ch <= 70) {\n          ch = ch - 65 + 10;\n        } else {\n          throw new Error(`${decodeErrPrefix} unexpected unicode escape character at position ${this.pos}`);\n        }\n\n        u4 = u4 * 16 + ch;\n        this.pos++;\n      }\n\n      return u4;\n    };\n\n    const readUtf8Char = () => {\n      const firstByte = this.ch();\n      let codePoint = null;\n      let bytesPerSequence = firstByte > 239 ? 4 : firstByte > 223 ? 3 : firstByte > 191 ? 2 : 1;\n\n      if (this.pos + bytesPerSequence > this.data.length) {\n        throw new Error(`${decodeErrPrefix} unexpected unicode sequence at position ${this.pos}`);\n      }\n\n      let secondByte, thirdByte, fourthByte, tempCodePoint;\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 128) {\n            codePoint = firstByte;\n          }\n\n          break;\n\n        case 2:\n          secondByte = this.data[this.pos + 1];\n\n          if ((secondByte & 192) === 128) {\n            tempCodePoint = (firstByte & 31) << 6 | secondByte & 63;\n\n            if (tempCodePoint > 127) {\n              codePoint = tempCodePoint;\n            }\n          }\n\n          break;\n\n        case 3:\n          secondByte = this.data[this.pos + 1];\n          thirdByte = this.data[this.pos + 2];\n\n          if ((secondByte & 192) === 128 && (thirdByte & 192) === 128) {\n            tempCodePoint = (firstByte & 15) << 12 | (secondByte & 63) << 6 | thirdByte & 63;\n\n            if (tempCodePoint > 2047 && (tempCodePoint < 55296 || tempCodePoint > 57343)) {\n              codePoint = tempCodePoint;\n            }\n          }\n\n          break;\n\n        case 4:\n          secondByte = this.data[this.pos + 1];\n          thirdByte = this.data[this.pos + 2];\n          fourthByte = this.data[this.pos + 3];\n\n          if ((secondByte & 192) === 128 && (thirdByte & 192) === 128 && (fourthByte & 192) === 128) {\n            tempCodePoint = (firstByte & 15) << 18 | (secondByte & 63) << 12 | (thirdByte & 63) << 6 | fourthByte & 63;\n\n            if (tempCodePoint > 65535 && tempCodePoint < 1114112) {\n              codePoint = tempCodePoint;\n            }\n          }\n\n      }\n\n      if (codePoint === null) {\n        codePoint = 65533;\n        bytesPerSequence = 1;\n      } else if (codePoint > 65535) {\n        codePoint -= 65536;\n        chars.push(codePoint >>> 10 & 1023 | 55296);\n        codePoint = 56320 | codePoint & 1023;\n      }\n\n      chars.push(codePoint);\n      this.pos += bytesPerSequence;\n    };\n\n    while (!this.done()) {\n      const ch = this.ch();\n      let ch1;\n\n      switch (ch) {\n        case 92:\n          this.pos++;\n\n          if (this.done()) {\n            throw new Error(`${decodeErrPrefix} unexpected string termination at position ${this.pos}`);\n          }\n\n          ch1 = this.ch();\n          this.pos++;\n\n          switch (ch1) {\n            case 34:\n            case 39:\n            case 92:\n            case 47:\n              chars.push(ch1);\n              break;\n\n            case 98:\n              chars.push(8);\n              break;\n\n            case 116:\n              chars.push(9);\n              break;\n\n            case 110:\n              chars.push(10);\n              break;\n\n            case 102:\n              chars.push(12);\n              break;\n\n            case 114:\n              chars.push(13);\n              break;\n\n            case 117:\n              chars.push(readu4());\n              break;\n\n            default:\n              throw new Error(`${decodeErrPrefix} unexpected string escape character at position ${this.pos}`);\n          }\n\n          break;\n\n        case 34:\n          this.pos++;\n          return new Token(Type.string, decodeCodePointsArray(chars), this.pos - startPos);\n\n        default:\n          if (ch < 32) {\n            throw new Error(`${decodeErrPrefix} invalid control character at position ${this.pos}`);\n          } else if (ch < 128) {\n            chars.push(ch);\n            this.pos++;\n          } else {\n            readUtf8Char();\n          }\n\n      }\n    }\n\n    throw new Error(`${decodeErrPrefix} unexpected end of string at position ${this.pos}`);\n  }\n\n  parseValue() {\n    switch (this.ch()) {\n      case 123:\n        this.modeStack.push('obj-start');\n        this.pos++;\n        return new Token(Type.map, Infinity, 1);\n\n      case 91:\n        this.modeStack.push('array-start');\n        this.pos++;\n        return new Token(Type.array, Infinity, 1);\n\n      case 34:\n        {\n          return this.parseString();\n        }\n\n      case 110:\n        this.expect([110, 117, 108, 108]);\n        return new Token(Type.null, null, 4);\n\n      case 102:\n        this.expect([102, 97, 108, 115, 101]);\n        return new Token(Type.false, false, 5);\n\n      case 116:\n        this.expect([116, 114, 117, 101]);\n        return new Token(Type.true, true, 4);\n\n      case 45:\n      case 48:\n      case 49:\n      case 50:\n      case 51:\n      case 52:\n      case 53:\n      case 54:\n      case 55:\n      case 56:\n      case 57:\n        return this.parseNumber();\n\n      default:\n        throw new Error(`${decodeErrPrefix} unexpected character at position ${this.pos}`);\n    }\n  }\n\n  next() {\n    this.skipWhitespace();\n\n    switch (this.currentMode()) {\n      case 'value':\n        this.modeStack.pop();\n        return this.parseValue();\n\n      case 'array-value':\n        {\n          this.modeStack.pop();\n\n          if (this.ch() === 93) {\n            this.pos++;\n            this.skipWhitespace();\n            return new Token(Type.break, undefined, 1);\n          }\n\n          if (this.ch() !== 44) {\n            throw new Error(`${decodeErrPrefix} unexpected character at position ${this.pos}, was expecting array delimiter but found '${String.fromCharCode(this.ch())}'`);\n          }\n\n          this.pos++;\n          this.modeStack.push('array-value');\n          this.skipWhitespace();\n          return this.parseValue();\n        }\n\n      case 'array-start':\n        {\n          this.modeStack.pop();\n\n          if (this.ch() === 93) {\n            this.pos++;\n            this.skipWhitespace();\n            return new Token(Type.break, undefined, 1);\n          }\n\n          this.modeStack.push('array-value');\n          this.skipWhitespace();\n          return this.parseValue();\n        }\n\n      case 'obj-key':\n        if (this.ch() === 125) {\n          this.modeStack.pop();\n          this.pos++;\n          this.skipWhitespace();\n          return new Token(Type.break, undefined, 1);\n        }\n\n        if (this.ch() !== 44) {\n          throw new Error(`${decodeErrPrefix} unexpected character at position ${this.pos}, was expecting object delimiter but found '${String.fromCharCode(this.ch())}'`);\n        }\n\n        this.pos++;\n        this.skipWhitespace();\n\n      case 'obj-start':\n        {\n          this.modeStack.pop();\n\n          if (this.ch() === 125) {\n            this.pos++;\n            this.skipWhitespace();\n            return new Token(Type.break, undefined, 1);\n          }\n\n          const token = this.parseString();\n          this.skipWhitespace();\n\n          if (this.ch() !== 58) {\n            throw new Error(`${decodeErrPrefix} unexpected character at position ${this.pos}, was expecting key/value delimiter ':' but found '${String.fromCharCode(this.ch())}'`);\n          }\n\n          this.pos++;\n          this.modeStack.push('obj-value');\n          return token;\n        }\n\n      case 'obj-value':\n        {\n          this.modeStack.pop();\n          this.modeStack.push('obj-key');\n          this.skipWhitespace();\n          return this.parseValue();\n        }\n\n      default:\n        throw new Error(`${decodeErrPrefix} unexpected parse state at position ${this.pos}; this shouldn't happen`);\n    }\n  }\n\n}\n\nfunction decode(data, options) {\n  options = Object.assign({\n    tokenizer: new Tokenizer(data, options)\n  }, options);\n  return _decode(data, options);\n}\n\nexport { decode, Tokenizer };","map":{"version":3,"names":["decode","_decode","Token","Type","decodeCodePointsArray","decodeErrPrefix","Tokenizer","constructor","data","options","pos","modeStack","lastToken","done","length","ch","currentMode","skipWhitespace","c","expect","str","Error","i","String","fromCharCode","parseNumber","startPos","negative","float","swallow","chars","includes","uint","numStr","apply","subarray","num","parseFloat","allowBigInt","Number","isSafeInteger","negint","BigInt","parseString","l","string","readu4","u4","readUtf8Char","firstByte","codePoint","bytesPerSequence","secondByte","thirdByte","fourthByte","tempCodePoint","push","ch1","parseValue","map","Infinity","array","null","false","true","next","pop","break","undefined","token","Object","assign","tokenizer"],"sources":["C:/Users/Ritika Mahajan/.vscode/Blockchain_Project/NFT-Marketplace/node_modules/cborg/esm/lib/json/decode.js"],"sourcesContent":["import { decode as _decode } from '../decode.js';\r\nimport {\r\n  Token,\r\n  Type\r\n} from '../token.js';\r\nimport { decodeCodePointsArray } from '../byte-utils.js';\r\nimport { decodeErrPrefix } from '../common.js';\r\nclass Tokenizer {\r\n  constructor(data, options = {}) {\r\n    this.pos = 0;\r\n    this.data = data;\r\n    this.options = options;\r\n    this.modeStack = ['value'];\r\n    this.lastToken = '';\r\n  }\r\n  done() {\r\n    return this.pos >= this.data.length;\r\n  }\r\n  ch() {\r\n    return this.data[this.pos];\r\n  }\r\n  currentMode() {\r\n    return this.modeStack[this.modeStack.length - 1];\r\n  }\r\n  skipWhitespace() {\r\n    let c = this.ch();\r\n    while (c === 32 || c === 9 || c === 13 || c === 10) {\r\n      c = this.data[++this.pos];\r\n    }\r\n  }\r\n  expect(str) {\r\n    if (this.data.length - this.pos < str.length) {\r\n      throw new Error(`${ decodeErrPrefix } unexpected end of input at position ${ this.pos }`);\r\n    }\r\n    for (let i = 0; i < str.length; i++) {\r\n      if (this.data[this.pos++] !== str[i]) {\r\n        throw new Error(`${ decodeErrPrefix } unexpected token at position ${ this.pos }, expected to find '${ String.fromCharCode(...str) }'`);\r\n      }\r\n    }\r\n  }\r\n  parseNumber() {\r\n    const startPos = this.pos;\r\n    let negative = false;\r\n    let float = false;\r\n    const swallow = chars => {\r\n      while (!this.done()) {\r\n        const ch = this.ch();\r\n        if (chars.includes(ch)) {\r\n          this.pos++;\r\n        } else {\r\n          break;\r\n        }\r\n      }\r\n    };\r\n    if (this.ch() === 45) {\r\n      negative = true;\r\n      this.pos++;\r\n    }\r\n    if (this.ch() === 48) {\r\n      this.pos++;\r\n      if (this.ch() === 46) {\r\n        this.pos++;\r\n        float = true;\r\n      } else {\r\n        return new Token(Type.uint, 0, this.pos - startPos);\r\n      }\r\n    }\r\n    swallow([\r\n      48,\r\n      49,\r\n      50,\r\n      51,\r\n      52,\r\n      53,\r\n      54,\r\n      55,\r\n      56,\r\n      57\r\n    ]);\r\n    if (negative && this.pos === startPos + 1) {\r\n      throw new Error(`${ decodeErrPrefix } unexpected token at position ${ this.pos }`);\r\n    }\r\n    if (!this.done() && this.ch() === 46) {\r\n      if (float) {\r\n        throw new Error(`${ decodeErrPrefix } unexpected token at position ${ this.pos }`);\r\n      }\r\n      float = true;\r\n      this.pos++;\r\n      swallow([\r\n        48,\r\n        49,\r\n        50,\r\n        51,\r\n        52,\r\n        53,\r\n        54,\r\n        55,\r\n        56,\r\n        57\r\n      ]);\r\n    }\r\n    if (!this.done() && (this.ch() === 101 || this.ch() === 69)) {\r\n      float = true;\r\n      this.pos++;\r\n      if (!this.done() && (this.ch() === 43 || this.ch() === 45)) {\r\n        this.pos++;\r\n      }\r\n      swallow([\r\n        48,\r\n        49,\r\n        50,\r\n        51,\r\n        52,\r\n        53,\r\n        54,\r\n        55,\r\n        56,\r\n        57\r\n      ]);\r\n    }\r\n    const numStr = String.fromCharCode.apply(null, this.data.subarray(startPos, this.pos));\r\n    const num = parseFloat(numStr);\r\n    if (float) {\r\n      return new Token(Type.float, num, this.pos - startPos);\r\n    }\r\n    if (this.options.allowBigInt !== true || Number.isSafeInteger(num)) {\r\n      return new Token(num >= 0 ? Type.uint : Type.negint, num, this.pos - startPos);\r\n    }\r\n    return new Token(num >= 0 ? Type.uint : Type.negint, BigInt(numStr), this.pos - startPos);\r\n  }\r\n  parseString() {\r\n    if (this.ch() !== 34) {\r\n      throw new Error(`${ decodeErrPrefix } unexpected character at position ${ this.pos }; this shouldn't happen`);\r\n    }\r\n    this.pos++;\r\n    for (let i = this.pos, l = 0; i < this.data.length && l < 65536; i++, l++) {\r\n      const ch = this.data[i];\r\n      if (ch === 92 || ch < 32 || ch >= 128) {\r\n        break;\r\n      }\r\n      if (ch === 34) {\r\n        const str = String.fromCharCode.apply(null, this.data.subarray(this.pos, i));\r\n        this.pos = i + 1;\r\n        return new Token(Type.string, str, l);\r\n      }\r\n    }\r\n    const startPos = this.pos;\r\n    const chars = [];\r\n    const readu4 = () => {\r\n      if (this.pos + 4 >= this.data.length) {\r\n        throw new Error(`${ decodeErrPrefix } unexpected end of unicode escape sequence at position ${ this.pos }`);\r\n      }\r\n      let u4 = 0;\r\n      for (let i = 0; i < 4; i++) {\r\n        let ch = this.ch();\r\n        if (ch >= 48 && ch <= 57) {\r\n          ch -= 48;\r\n        } else if (ch >= 97 && ch <= 102) {\r\n          ch = ch - 97 + 10;\r\n        } else if (ch >= 65 && ch <= 70) {\r\n          ch = ch - 65 + 10;\r\n        } else {\r\n          throw new Error(`${ decodeErrPrefix } unexpected unicode escape character at position ${ this.pos }`);\r\n        }\r\n        u4 = u4 * 16 + ch;\r\n        this.pos++;\r\n      }\r\n      return u4;\r\n    };\r\n    const readUtf8Char = () => {\r\n      const firstByte = this.ch();\r\n      let codePoint = null;\r\n      let bytesPerSequence = firstByte > 239 ? 4 : firstByte > 223 ? 3 : firstByte > 191 ? 2 : 1;\r\n      if (this.pos + bytesPerSequence > this.data.length) {\r\n        throw new Error(`${ decodeErrPrefix } unexpected unicode sequence at position ${ this.pos }`);\r\n      }\r\n      let secondByte, thirdByte, fourthByte, tempCodePoint;\r\n      switch (bytesPerSequence) {\r\n      case 1:\r\n        if (firstByte < 128) {\r\n          codePoint = firstByte;\r\n        }\r\n        break;\r\n      case 2:\r\n        secondByte = this.data[this.pos + 1];\r\n        if ((secondByte & 192) === 128) {\r\n          tempCodePoint = (firstByte & 31) << 6 | secondByte & 63;\r\n          if (tempCodePoint > 127) {\r\n            codePoint = tempCodePoint;\r\n          }\r\n        }\r\n        break;\r\n      case 3:\r\n        secondByte = this.data[this.pos + 1];\r\n        thirdByte = this.data[this.pos + 2];\r\n        if ((secondByte & 192) === 128 && (thirdByte & 192) === 128) {\r\n          tempCodePoint = (firstByte & 15) << 12 | (secondByte & 63) << 6 | thirdByte & 63;\r\n          if (tempCodePoint > 2047 && (tempCodePoint < 55296 || tempCodePoint > 57343)) {\r\n            codePoint = tempCodePoint;\r\n          }\r\n        }\r\n        break;\r\n      case 4:\r\n        secondByte = this.data[this.pos + 1];\r\n        thirdByte = this.data[this.pos + 2];\r\n        fourthByte = this.data[this.pos + 3];\r\n        if ((secondByte & 192) === 128 && (thirdByte & 192) === 128 && (fourthByte & 192) === 128) {\r\n          tempCodePoint = (firstByte & 15) << 18 | (secondByte & 63) << 12 | (thirdByte & 63) << 6 | fourthByte & 63;\r\n          if (tempCodePoint > 65535 && tempCodePoint < 1114112) {\r\n            codePoint = tempCodePoint;\r\n          }\r\n        }\r\n      }\r\n      if (codePoint === null) {\r\n        codePoint = 65533;\r\n        bytesPerSequence = 1;\r\n      } else if (codePoint > 65535) {\r\n        codePoint -= 65536;\r\n        chars.push(codePoint >>> 10 & 1023 | 55296);\r\n        codePoint = 56320 | codePoint & 1023;\r\n      }\r\n      chars.push(codePoint);\r\n      this.pos += bytesPerSequence;\r\n    };\r\n    while (!this.done()) {\r\n      const ch = this.ch();\r\n      let ch1;\r\n      switch (ch) {\r\n      case 92:\r\n        this.pos++;\r\n        if (this.done()) {\r\n          throw new Error(`${ decodeErrPrefix } unexpected string termination at position ${ this.pos }`);\r\n        }\r\n        ch1 = this.ch();\r\n        this.pos++;\r\n        switch (ch1) {\r\n        case 34:\r\n        case 39:\r\n        case 92:\r\n        case 47:\r\n          chars.push(ch1);\r\n          break;\r\n        case 98:\r\n          chars.push(8);\r\n          break;\r\n        case 116:\r\n          chars.push(9);\r\n          break;\r\n        case 110:\r\n          chars.push(10);\r\n          break;\r\n        case 102:\r\n          chars.push(12);\r\n          break;\r\n        case 114:\r\n          chars.push(13);\r\n          break;\r\n        case 117:\r\n          chars.push(readu4());\r\n          break;\r\n        default:\r\n          throw new Error(`${ decodeErrPrefix } unexpected string escape character at position ${ this.pos }`);\r\n        }\r\n        break;\r\n      case 34:\r\n        this.pos++;\r\n        return new Token(Type.string, decodeCodePointsArray(chars), this.pos - startPos);\r\n      default:\r\n        if (ch < 32) {\r\n          throw new Error(`${ decodeErrPrefix } invalid control character at position ${ this.pos }`);\r\n        } else if (ch < 128) {\r\n          chars.push(ch);\r\n          this.pos++;\r\n        } else {\r\n          readUtf8Char();\r\n        }\r\n      }\r\n    }\r\n    throw new Error(`${ decodeErrPrefix } unexpected end of string at position ${ this.pos }`);\r\n  }\r\n  parseValue() {\r\n    switch (this.ch()) {\r\n    case 123:\r\n      this.modeStack.push('obj-start');\r\n      this.pos++;\r\n      return new Token(Type.map, Infinity, 1);\r\n    case 91:\r\n      this.modeStack.push('array-start');\r\n      this.pos++;\r\n      return new Token(Type.array, Infinity, 1);\r\n    case 34: {\r\n        return this.parseString();\r\n      }\r\n    case 110:\r\n      this.expect([\r\n        110,\r\n        117,\r\n        108,\r\n        108\r\n      ]);\r\n      return new Token(Type.null, null, 4);\r\n    case 102:\r\n      this.expect([\r\n        102,\r\n        97,\r\n        108,\r\n        115,\r\n        101\r\n      ]);\r\n      return new Token(Type.false, false, 5);\r\n    case 116:\r\n      this.expect([\r\n        116,\r\n        114,\r\n        117,\r\n        101\r\n      ]);\r\n      return new Token(Type.true, true, 4);\r\n    case 45:\r\n    case 48:\r\n    case 49:\r\n    case 50:\r\n    case 51:\r\n    case 52:\r\n    case 53:\r\n    case 54:\r\n    case 55:\r\n    case 56:\r\n    case 57:\r\n      return this.parseNumber();\r\n    default:\r\n      throw new Error(`${ decodeErrPrefix } unexpected character at position ${ this.pos }`);\r\n    }\r\n  }\r\n  next() {\r\n    this.skipWhitespace();\r\n    switch (this.currentMode()) {\r\n    case 'value':\r\n      this.modeStack.pop();\r\n      return this.parseValue();\r\n    case 'array-value': {\r\n        this.modeStack.pop();\r\n        if (this.ch() === 93) {\r\n          this.pos++;\r\n          this.skipWhitespace();\r\n          return new Token(Type.break, undefined, 1);\r\n        }\r\n        if (this.ch() !== 44) {\r\n          throw new Error(`${ decodeErrPrefix } unexpected character at position ${ this.pos }, was expecting array delimiter but found '${ String.fromCharCode(this.ch()) }'`);\r\n        }\r\n        this.pos++;\r\n        this.modeStack.push('array-value');\r\n        this.skipWhitespace();\r\n        return this.parseValue();\r\n      }\r\n    case 'array-start': {\r\n        this.modeStack.pop();\r\n        if (this.ch() === 93) {\r\n          this.pos++;\r\n          this.skipWhitespace();\r\n          return new Token(Type.break, undefined, 1);\r\n        }\r\n        this.modeStack.push('array-value');\r\n        this.skipWhitespace();\r\n        return this.parseValue();\r\n      }\r\n    case 'obj-key':\r\n      if (this.ch() === 125) {\r\n        this.modeStack.pop();\r\n        this.pos++;\r\n        this.skipWhitespace();\r\n        return new Token(Type.break, undefined, 1);\r\n      }\r\n      if (this.ch() !== 44) {\r\n        throw new Error(`${ decodeErrPrefix } unexpected character at position ${ this.pos }, was expecting object delimiter but found '${ String.fromCharCode(this.ch()) }'`);\r\n      }\r\n      this.pos++;\r\n      this.skipWhitespace();\r\n    case 'obj-start': {\r\n        this.modeStack.pop();\r\n        if (this.ch() === 125) {\r\n          this.pos++;\r\n          this.skipWhitespace();\r\n          return new Token(Type.break, undefined, 1);\r\n        }\r\n        const token = this.parseString();\r\n        this.skipWhitespace();\r\n        if (this.ch() !== 58) {\r\n          throw new Error(`${ decodeErrPrefix } unexpected character at position ${ this.pos }, was expecting key/value delimiter ':' but found '${ String.fromCharCode(this.ch()) }'`);\r\n        }\r\n        this.pos++;\r\n        this.modeStack.push('obj-value');\r\n        return token;\r\n      }\r\n    case 'obj-value': {\r\n        this.modeStack.pop();\r\n        this.modeStack.push('obj-key');\r\n        this.skipWhitespace();\r\n        return this.parseValue();\r\n      }\r\n    default:\r\n      throw new Error(`${ decodeErrPrefix } unexpected parse state at position ${ this.pos }; this shouldn't happen`);\r\n    }\r\n  }\r\n}\r\nfunction decode(data, options) {\r\n  options = Object.assign({ tokenizer: new Tokenizer(data, options) }, options);\r\n  return _decode(data, options);\r\n}\r\nexport {\r\n  decode,\r\n  Tokenizer\r\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}