{"ast":null,"code":"import { configure } from './lib/configure.js';\nimport { toUrlSearchParams } from './lib/to-url-search-params.js';\nexport const createResolve = configure(api => {\n  async function resolve(path) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const res = await api.post('resolve', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: path,\n        ...options\n      }),\n      headers: options.headers\n    });\n    const {\n      Path\n    } = await res.json();\n    return Path;\n  }\n\n  return resolve;\n});","map":{"version":3,"names":["configure","toUrlSearchParams","createResolve","api","resolve","path","options","res","post","signal","searchParams","arg","headers","Path","json"],"sources":["C:/Users/Ritika Mahajan/.vscode/Blockchain_Project/NFT-Marketplace/node_modules/ipfs-http-client/esm/src/resolve.js"],"sourcesContent":["import { configure } from './lib/configure.js';\r\nimport { toUrlSearchParams } from './lib/to-url-search-params.js';\r\nexport const createResolve = configure(api => {\r\n  async function resolve(path, options = {}) {\r\n    const res = await api.post('resolve', {\r\n      signal: options.signal,\r\n      searchParams: toUrlSearchParams({\r\n        arg: path,\r\n        ...options\r\n      }),\r\n      headers: options.headers\r\n    });\r\n    const {Path} = await res.json();\r\n    return Path;\r\n  }\r\n  return resolve;\r\n});"],"mappings":"AAAA,SAASA,SAAT,QAA0B,oBAA1B;AACA,SAASC,iBAAT,QAAkC,+BAAlC;AACA,OAAO,MAAMC,aAAa,GAAGF,SAAS,CAACG,GAAG,IAAI;EAC5C,eAAeC,OAAf,CAAuBC,IAAvB,EAA2C;IAAA,IAAdC,OAAc,uEAAJ,EAAI;IACzC,MAAMC,GAAG,GAAG,MAAMJ,GAAG,CAACK,IAAJ,CAAS,SAAT,EAAoB;MACpCC,MAAM,EAAEH,OAAO,CAACG,MADoB;MAEpCC,YAAY,EAAET,iBAAiB,CAAC;QAC9BU,GAAG,EAAEN,IADyB;QAE9B,GAAGC;MAF2B,CAAD,CAFK;MAMpCM,OAAO,EAAEN,OAAO,CAACM;IANmB,CAApB,CAAlB;IAQA,MAAM;MAACC;IAAD,IAAS,MAAMN,GAAG,CAACO,IAAJ,EAArB;IACA,OAAOD,IAAP;EACD;;EACD,OAAOT,OAAP;AACD,CAdqC,CAA/B"},"metadata":{},"sourceType":"module"}