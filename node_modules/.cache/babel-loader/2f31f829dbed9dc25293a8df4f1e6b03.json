{"ast":null,"code":"import { CID } from 'multiformats/cid';\nimport { objectToCamel } from './lib/object-to-camel.js';\nimport { configure } from './lib/configure.js';\nimport { multipartRequest } from 'ipfs-core-utils/multipart-request';\nimport { toUrlSearchParams } from './lib/to-url-search-params.js';\nimport { abortSignal } from './lib/abort-signal.js';\nexport const createAddAll = configure(api => {\n  async function* addAll(source) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const controller = new AbortController();\n    const signal = abortSignal(controller.signal, options.signal);\n    const {\n      headers,\n      body,\n      total,\n      parts\n    } = await multipartRequest(source, controller, options.headers);\n    const [progressFn, onUploadProgress] = typeof options.progress === 'function' ? createProgressHandler(total, parts, options.progress) : [undefined, undefined];\n    const res = await api.post('add', {\n      searchParams: toUrlSearchParams({\n        'stream-channels': true,\n        ...options,\n        progress: Boolean(progressFn)\n      }),\n      onUploadProgress,\n      signal,\n      headers,\n      body\n    });\n\n    for await (let file of res.ndjson()) {\n      file = objectToCamel(file);\n\n      if (file.hash !== undefined) {\n        yield toCoreInterface(file);\n      } else if (progressFn) {\n        progressFn(file.bytes || 0, file.name);\n      }\n    }\n  }\n\n  return addAll;\n});\n\nconst createProgressHandler = (total, parts, progress) => parts ? [undefined, createOnUploadProgress(total, parts, progress)] : [progress, undefined];\n\nconst createOnUploadProgress = (size, parts, progress) => {\n  let index = 0;\n  const count = parts.length;\n  return _ref => {\n    let {\n      loaded,\n      total\n    } = _ref;\n    const position = Math.floor(loaded / total * size);\n\n    while (index < count) {\n      const {\n        start,\n        end,\n        name\n      } = parts[index];\n\n      if (position < end) {\n        progress(position - start, name);\n        break;\n      } else {\n        progress(end - start, name);\n        index += 1;\n      }\n    }\n  };\n};\n\nfunction toCoreInterface(_ref2) {\n  let {\n    name,\n    hash,\n    size,\n    mode,\n    mtime,\n    mtimeNsecs\n  } = _ref2;\n  const output = {\n    path: name,\n    cid: CID.parse(hash),\n    size: parseInt(size)\n  };\n\n  if (mode != null) {\n    output.mode = parseInt(mode, 8);\n  }\n\n  if (mtime != null) {\n    output.mtime = {\n      secs: mtime,\n      nsecs: mtimeNsecs || 0\n    };\n  }\n\n  return output;\n}","map":{"version":3,"names":["CID","objectToCamel","configure","multipartRequest","toUrlSearchParams","abortSignal","createAddAll","api","addAll","source","options","controller","AbortController","signal","headers","body","total","parts","progressFn","onUploadProgress","progress","createProgressHandler","undefined","res","post","searchParams","Boolean","file","ndjson","hash","toCoreInterface","bytes","name","createOnUploadProgress","size","index","count","length","loaded","position","Math","floor","start","end","mode","mtime","mtimeNsecs","output","path","cid","parse","parseInt","secs","nsecs"],"sources":["C:/Users/Ritika Mahajan/.vscode/Blockchain_Project/NFT-Marketplace/node_modules/ipfs-http-client/esm/src/add-all.js"],"sourcesContent":["import { CID } from 'multiformats/cid';\r\nimport { objectToCamel } from './lib/object-to-camel.js';\r\nimport { configure } from './lib/configure.js';\r\nimport { multipartRequest } from 'ipfs-core-utils/multipart-request';\r\nimport { toUrlSearchParams } from './lib/to-url-search-params.js';\r\nimport { abortSignal } from './lib/abort-signal.js';\r\nexport const createAddAll = configure(api => {\r\n  async function* addAll(source, options = {}) {\r\n    const controller = new AbortController();\r\n    const signal = abortSignal(controller.signal, options.signal);\r\n    const {headers, body, total, parts} = await multipartRequest(source, controller, options.headers);\r\n    const [progressFn, onUploadProgress] = typeof options.progress === 'function' ? createProgressHandler(total, parts, options.progress) : [\r\n      undefined,\r\n      undefined\r\n    ];\r\n    const res = await api.post('add', {\r\n      searchParams: toUrlSearchParams({\r\n        'stream-channels': true,\r\n        ...options,\r\n        progress: Boolean(progressFn)\r\n      }),\r\n      onUploadProgress,\r\n      signal,\r\n      headers,\r\n      body\r\n    });\r\n    for await (let file of res.ndjson()) {\r\n      file = objectToCamel(file);\r\n      if (file.hash !== undefined) {\r\n        yield toCoreInterface(file);\r\n      } else if (progressFn) {\r\n        progressFn(file.bytes || 0, file.name);\r\n      }\r\n    }\r\n  }\r\n  return addAll;\r\n});\r\nconst createProgressHandler = (total, parts, progress) => parts ? [\r\n  undefined,\r\n  createOnUploadProgress(total, parts, progress)\r\n] : [\r\n  progress,\r\n  undefined\r\n];\r\nconst createOnUploadProgress = (size, parts, progress) => {\r\n  let index = 0;\r\n  const count = parts.length;\r\n  return ({loaded, total}) => {\r\n    const position = Math.floor(loaded / total * size);\r\n    while (index < count) {\r\n      const {start, end, name} = parts[index];\r\n      if (position < end) {\r\n        progress(position - start, name);\r\n        break;\r\n      } else {\r\n        progress(end - start, name);\r\n        index += 1;\r\n      }\r\n    }\r\n  };\r\n};\r\nfunction toCoreInterface({name, hash, size, mode, mtime, mtimeNsecs}) {\r\n  const output = {\r\n    path: name,\r\n    cid: CID.parse(hash),\r\n    size: parseInt(size)\r\n  };\r\n  if (mode != null) {\r\n    output.mode = parseInt(mode, 8);\r\n  }\r\n  if (mtime != null) {\r\n    output.mtime = {\r\n      secs: mtime,\r\n      nsecs: mtimeNsecs || 0\r\n    };\r\n  }\r\n  return output;\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}