{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ritika Mahajan\\\\.vscode\\\\Blockchain_Project\\\\NFT-Marketplace\\\\src\\\\frontend\\\\components\\\\MyPurchases.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport { ethers } from \"ethers\";\nimport { Row, Col, Card } from 'react-bootstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function MyPurchases(_ref) {\n  _s();\n\n  let {\n    marketplace,\n    nft,\n    account\n  } = _ref;\n  const [loading, setLoading] = useState(true);\n  const [purchases, setPurchases] = useState([]);\n\n  const loadPurchasedItems = async () => {\n    // Fetch purchased items from marketplace by quering Offered events with the buyer set as the user\n    const filter = marketplace.filters.Bought(null, null, null, null, null, account);\n    const results = await marketplace.queryFilter(filter); //Fetch metadata of each nft and add that to listedItem object.\n\n    const purchases = await Promise.all(results.map(async i => {\n      // fetch arguments from each result\n      i = i.args; // get uri url from nft contract\n\n      const uri = await nft.tokenURI(i.tokenId); // use uri to fetch the nft metadata stored on ipfs \n\n      const response = await fetch(uri);\n      const metadata = await response.json(); // get total price of item (item price + fee)\n\n      const totalPrice = await marketplace.getTotalPrice(i.itemId); // define listed item object\n\n      let purchasedItem = {\n        totalPrice,\n        price: i.price,\n        itemId: i.itemId,\n        name: metadata.name,\n        description: metadata.description,\n        image: metadata.image\n      };\n      return purchasedItem;\n    }));\n    setLoading(false);\n    setPurchases(purchases);\n  };\n\n  useEffect(() => {\n    loadPurchasedItems();\n  }, []);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"main\", {\n    style: {\n      padding: \"1rem 0\"\n    },\n    children: /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex justify-center\",\n    children: purchases.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"px-5 container\",\n      children: /*#__PURE__*/_jsxDEV(Row, {\n        xs: 1,\n        md: 2,\n        lg: 4,\n        className: \"g-4 py-5\",\n        children: purchases.map((item, idx) => /*#__PURE__*/_jsxDEV(Col, {\n          className: \"overflow-hidden\",\n          children: /*#__PURE__*/_jsxDEV(Card, {\n            children: [/*#__PURE__*/_jsxDEV(Card.Img, {\n              variant: \"top\",\n              src: item.image\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 53,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Card.Footer, {\n              children: [ethers.utils.formatEther(item.totalPrice), \" ETH\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 54,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 17\n          }, this)\n        }, idx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"main\", {\n      style: {\n        padding: \"1rem 0\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"No purchases\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n}\n\n_s(MyPurchases, \"+bT9nvXJXwVwMkewhHc+Eyc0m60=\");\n\n_c = MyPurchases;\n\nvar _c;\n\n$RefreshReg$(_c, \"MyPurchases\");","map":{"version":3,"names":["useState","useEffect","ethers","Row","Col","Card","MyPurchases","marketplace","nft","account","loading","setLoading","purchases","setPurchases","loadPurchasedItems","filter","filters","Bought","results","queryFilter","Promise","all","map","i","args","uri","tokenURI","tokenId","response","fetch","metadata","json","totalPrice","getTotalPrice","itemId","purchasedItem","price","name","description","image","padding","length","item","idx","utils","formatEther"],"sources":["C:/Users/Ritika Mahajan/.vscode/Blockchain_Project/NFT-Marketplace/src/frontend/components/MyPurchases.js"],"sourcesContent":["import { useState, useEffect } from 'react'\r\nimport { ethers } from \"ethers\"\r\nimport { Row, Col, Card } from 'react-bootstrap'\r\n\r\nexport default function MyPurchases({ marketplace, nft, account }) {\r\n  const [loading, setLoading] = useState(true)\r\n  const [purchases, setPurchases] = useState([])\r\n  const loadPurchasedItems = async () => {\r\n    // Fetch purchased items from marketplace by quering Offered events with the buyer set as the user\r\n    const filter =  marketplace.filters.Bought(null,null,null,null,null,account)\r\n    const results = await marketplace.queryFilter(filter)\r\n    //Fetch metadata of each nft and add that to listedItem object.\r\n    const purchases = await Promise.all(results.map(async i => {\r\n      // fetch arguments from each result\r\n      i = i.args\r\n      // get uri url from nft contract\r\n      const uri = await nft.tokenURI(i.tokenId)\r\n      // use uri to fetch the nft metadata stored on ipfs \r\n      const response = await fetch(uri)\r\n      const metadata = await response.json()\r\n      // get total price of item (item price + fee)\r\n      const totalPrice = await marketplace.getTotalPrice(i.itemId)\r\n      // define listed item object\r\n      let purchasedItem = {\r\n        totalPrice,\r\n        price: i.price,\r\n        itemId: i.itemId,\r\n        name: metadata.name,\r\n        description: metadata.description,\r\n        image: metadata.image\r\n      }\r\n      return purchasedItem\r\n    }))\r\n    setLoading(false)\r\n    setPurchases(purchases)\r\n  }\r\n  useEffect(() => {\r\n    loadPurchasedItems()\r\n  }, [])\r\n  if (loading) return (\r\n    <main style={{ padding: \"1rem 0\" }}>\r\n      <h2>Loading...</h2>\r\n    </main>\r\n  )\r\n  return (\r\n    <div className=\"flex justify-center\">\r\n      {purchases.length > 0 ?\r\n        <div className=\"px-5 container\">\r\n          <Row xs={1} md={2} lg={4} className=\"g-4 py-5\">\r\n            {purchases.map((item, idx) => (\r\n              <Col key={idx} className=\"overflow-hidden\">\r\n                <Card>\r\n                  <Card.Img variant=\"top\" src={item.image} />\r\n                  <Card.Footer>{ethers.utils.formatEther(item.totalPrice)} ETH</Card.Footer>\r\n                </Card>\r\n              </Col>\r\n            ))}\r\n          </Row>\r\n        </div>\r\n        : (\r\n          <main style={{ padding: \"1rem 0\" }}>\r\n            <h2>No purchases</h2>\r\n          </main>\r\n        )}\r\n    </div>\r\n  );\r\n}"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,SAASC,GAAT,EAAcC,GAAd,EAAmBC,IAAnB,QAA+B,iBAA/B;;AAEA,eAAe,SAASC,WAAT,OAAoD;EAAA;;EAAA,IAA/B;IAAEC,WAAF;IAAeC,GAAf;IAAoBC;EAApB,CAA+B;EACjE,MAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBX,QAAQ,CAAC,IAAD,CAAtC;EACA,MAAM,CAACY,SAAD,EAAYC,YAAZ,IAA4Bb,QAAQ,CAAC,EAAD,CAA1C;;EACA,MAAMc,kBAAkB,GAAG,YAAY;IACrC;IACA,MAAMC,MAAM,GAAIR,WAAW,CAACS,OAAZ,CAAoBC,MAApB,CAA2B,IAA3B,EAAgC,IAAhC,EAAqC,IAArC,EAA0C,IAA1C,EAA+C,IAA/C,EAAoDR,OAApD,CAAhB;IACA,MAAMS,OAAO,GAAG,MAAMX,WAAW,CAACY,WAAZ,CAAwBJ,MAAxB,CAAtB,CAHqC,CAIrC;;IACA,MAAMH,SAAS,GAAG,MAAMQ,OAAO,CAACC,GAAR,CAAYH,OAAO,CAACI,GAAR,CAAY,MAAMC,CAAN,IAAW;MACzD;MACAA,CAAC,GAAGA,CAAC,CAACC,IAAN,CAFyD,CAGzD;;MACA,MAAMC,GAAG,GAAG,MAAMjB,GAAG,CAACkB,QAAJ,CAAaH,CAAC,CAACI,OAAf,CAAlB,CAJyD,CAKzD;;MACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACJ,GAAD,CAA5B;MACA,MAAMK,QAAQ,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAvB,CAPyD,CAQzD;;MACA,MAAMC,UAAU,GAAG,MAAMzB,WAAW,CAAC0B,aAAZ,CAA0BV,CAAC,CAACW,MAA5B,CAAzB,CATyD,CAUzD;;MACA,IAAIC,aAAa,GAAG;QAClBH,UADkB;QAElBI,KAAK,EAAEb,CAAC,CAACa,KAFS;QAGlBF,MAAM,EAAEX,CAAC,CAACW,MAHQ;QAIlBG,IAAI,EAAEP,QAAQ,CAACO,IAJG;QAKlBC,WAAW,EAAER,QAAQ,CAACQ,WALJ;QAMlBC,KAAK,EAAET,QAAQ,CAACS;MANE,CAApB;MAQA,OAAOJ,aAAP;IACD,CApBmC,CAAZ,CAAxB;IAqBAxB,UAAU,CAAC,KAAD,CAAV;IACAE,YAAY,CAACD,SAAD,CAAZ;EACD,CA5BD;;EA6BAX,SAAS,CAAC,MAAM;IACda,kBAAkB;EACnB,CAFQ,EAEN,EAFM,CAAT;EAGA,IAAIJ,OAAJ,EAAa,oBACX;IAAM,KAAK,EAAE;MAAE8B,OAAO,EAAE;IAAX,CAAb;IAAA,uBACE;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EADF;IAAA;IAAA;IAAA;EAAA,QADW;EAKb,oBACE;IAAK,SAAS,EAAC,qBAAf;IAAA,UACG5B,SAAS,CAAC6B,MAAV,GAAmB,CAAnB,gBACC;MAAK,SAAS,EAAC,gBAAf;MAAA,uBACE,QAAC,GAAD;QAAK,EAAE,EAAE,CAAT;QAAY,EAAE,EAAE,CAAhB;QAAmB,EAAE,EAAE,CAAvB;QAA0B,SAAS,EAAC,UAApC;QAAA,UACG7B,SAAS,CAACU,GAAV,CAAc,CAACoB,IAAD,EAAOC,GAAP,kBACb,QAAC,GAAD;UAAe,SAAS,EAAC,iBAAzB;UAAA,uBACE,QAAC,IAAD;YAAA,wBACE,QAAC,IAAD,CAAM,GAAN;cAAU,OAAO,EAAC,KAAlB;cAAwB,GAAG,EAAED,IAAI,CAACH;YAAlC;cAAA;cAAA;cAAA;YAAA,QADF,eAEE,QAAC,IAAD,CAAM,MAAN;cAAA,WAAcrC,MAAM,CAAC0C,KAAP,CAAaC,WAAb,CAAyBH,IAAI,CAACV,UAA9B,CAAd;YAAA;cAAA;cAAA;cAAA;YAAA,QAFF;UAAA;YAAA;YAAA;YAAA;UAAA;QADF,GAAUW,GAAV;UAAA;UAAA;UAAA;QAAA,QADD;MADH;QAAA;QAAA;QAAA;MAAA;IADF;MAAA;MAAA;MAAA;IAAA,QADD,gBAcG;MAAM,KAAK,EAAE;QAAEH,OAAO,EAAE;MAAX,CAAb;MAAA,uBACE;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IADF;MAAA;MAAA;MAAA;IAAA;EAfN;IAAA;IAAA;IAAA;EAAA,QADF;AAsBD;;GA9DuBlC,W;;KAAAA,W"},"metadata":{},"sourceType":"module"}