{"ast":null,"code":"import { CID } from 'multiformats/cid';\nimport { multipartRequest } from 'ipfs-core-utils/multipart-request';\nimport { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nimport { abortSignal } from '../lib/abort-signal.js';\nexport const createPut = configure(api => {\n  async function put(data) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const controller = new AbortController();\n    const signal = abortSignal(controller.signal, options.signal);\n    let res;\n\n    try {\n      const response = await api.post('block/put', {\n        signal: signal,\n        searchParams: toUrlSearchParams(options),\n        ...(await multipartRequest([data], controller, options.headers))\n      });\n      res = await response.json();\n    } catch (err) {\n      if (options.format === 'dag-pb') {\n        return put(data, { ...options,\n          format: 'protobuf'\n        });\n      } else if (options.format === 'dag-cbor') {\n        return put(data, { ...options,\n          format: 'cbor'\n        });\n      }\n\n      throw err;\n    }\n\n    return CID.parse(res.Key);\n  }\n\n  return put;\n});","map":{"version":3,"names":["CID","multipartRequest","configure","toUrlSearchParams","abortSignal","createPut","api","put","data","options","controller","AbortController","signal","res","response","post","searchParams","headers","json","err","format","parse","Key"],"sources":["C:/Users/Ritika Mahajan/.vscode/Blockchain_Project/NFT-Marketplace/node_modules/ipfs-http-client/esm/src/block/put.js"],"sourcesContent":["import { CID } from 'multiformats/cid';\r\nimport { multipartRequest } from 'ipfs-core-utils/multipart-request';\r\nimport { configure } from '../lib/configure.js';\r\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\r\nimport { abortSignal } from '../lib/abort-signal.js';\r\nexport const createPut = configure(api => {\r\n  async function put(data, options = {}) {\r\n    const controller = new AbortController();\r\n    const signal = abortSignal(controller.signal, options.signal);\r\n    let res;\r\n    try {\r\n      const response = await api.post('block/put', {\r\n        signal: signal,\r\n        searchParams: toUrlSearchParams(options),\r\n        ...await multipartRequest([data], controller, options.headers)\r\n      });\r\n      res = await response.json();\r\n    } catch (err) {\r\n      if (options.format === 'dag-pb') {\r\n        return put(data, {\r\n          ...options,\r\n          format: 'protobuf'\r\n        });\r\n      } else if (options.format === 'dag-cbor') {\r\n        return put(data, {\r\n          ...options,\r\n          format: 'cbor'\r\n        });\r\n      }\r\n      throw err;\r\n    }\r\n    return CID.parse(res.Key);\r\n  }\r\n  return put;\r\n});"],"mappings":"AAAA,SAASA,GAAT,QAAoB,kBAApB;AACA,SAASC,gBAAT,QAAiC,mCAAjC;AACA,SAASC,SAAT,QAA0B,qBAA1B;AACA,SAASC,iBAAT,QAAkC,gCAAlC;AACA,SAASC,WAAT,QAA4B,wBAA5B;AACA,OAAO,MAAMC,SAAS,GAAGH,SAAS,CAACI,GAAG,IAAI;EACxC,eAAeC,GAAf,CAAmBC,IAAnB,EAAuC;IAAA,IAAdC,OAAc,uEAAJ,EAAI;IACrC,MAAMC,UAAU,GAAG,IAAIC,eAAJ,EAAnB;IACA,MAAMC,MAAM,GAAGR,WAAW,CAACM,UAAU,CAACE,MAAZ,EAAoBH,OAAO,CAACG,MAA5B,CAA1B;IACA,IAAIC,GAAJ;;IACA,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMR,GAAG,CAACS,IAAJ,CAAS,WAAT,EAAsB;QAC3CH,MAAM,EAAEA,MADmC;QAE3CI,YAAY,EAAEb,iBAAiB,CAACM,OAAD,CAFY;QAG3C,IAAG,MAAMR,gBAAgB,CAAC,CAACO,IAAD,CAAD,EAASE,UAAT,EAAqBD,OAAO,CAACQ,OAA7B,CAAzB;MAH2C,CAAtB,CAAvB;MAKAJ,GAAG,GAAG,MAAMC,QAAQ,CAACI,IAAT,EAAZ;IACD,CAPD,CAOE,OAAOC,GAAP,EAAY;MACZ,IAAIV,OAAO,CAACW,MAAR,KAAmB,QAAvB,EAAiC;QAC/B,OAAOb,GAAG,CAACC,IAAD,EAAO,EACf,GAAGC,OADY;UAEfW,MAAM,EAAE;QAFO,CAAP,CAAV;MAID,CALD,MAKO,IAAIX,OAAO,CAACW,MAAR,KAAmB,UAAvB,EAAmC;QACxC,OAAOb,GAAG,CAACC,IAAD,EAAO,EACf,GAAGC,OADY;UAEfW,MAAM,EAAE;QAFO,CAAP,CAAV;MAID;;MACD,MAAMD,GAAN;IACD;;IACD,OAAOnB,GAAG,CAACqB,KAAJ,CAAUR,GAAG,CAACS,GAAd,CAAP;EACD;;EACD,OAAOf,GAAP;AACD,CA7BiC,CAA3B"},"metadata":{},"sourceType":"module"}