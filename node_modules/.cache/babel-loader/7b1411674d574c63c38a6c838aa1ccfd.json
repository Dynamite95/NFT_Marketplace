{"ast":null,"code":"const LOAD_BASE = name => Promise.reject(new Error(`No base found for \"${name}\"`));\n\nexport class Multibases {\n  constructor(options) {\n    this._basesByName = {};\n    this._basesByPrefix = {};\n    this._loadBase = options.loadBase || LOAD_BASE;\n\n    for (const base of options.bases) {\n      this.addBase(base);\n    }\n  }\n\n  addBase(base) {\n    if (this._basesByName[base.name] || this._basesByPrefix[base.prefix]) {\n      throw new Error(`Codec already exists for codec \"${base.name}\"`);\n    }\n\n    this._basesByName[base.name] = base;\n    this._basesByPrefix[base.prefix] = base;\n  }\n\n  removeBase(base) {\n    delete this._basesByName[base.name];\n    delete this._basesByPrefix[base.prefix];\n  }\n\n  async getBase(nameOrPrefix) {\n    if (this._basesByName[nameOrPrefix]) {\n      return this._basesByName[nameOrPrefix];\n    }\n\n    if (this._basesByPrefix[nameOrPrefix]) {\n      return this._basesByPrefix[nameOrPrefix];\n    }\n\n    const base = await this._loadBase(nameOrPrefix);\n\n    if (this._basesByName[base.name] == null && this._basesByPrefix[base.prefix] == null) {\n      this.addBase(base);\n    }\n\n    return base;\n  }\n\n  listBases() {\n    return Object.values(this._basesByName);\n  }\n\n}","map":{"version":3,"names":["LOAD_BASE","name","Promise","reject","Error","Multibases","constructor","options","_basesByName","_basesByPrefix","_loadBase","loadBase","base","bases","addBase","prefix","removeBase","getBase","nameOrPrefix","listBases","Object","values"],"sources":["C:/Users/Ritika Mahajan/.vscode/Blockchain_Project/NFT-Marketplace/node_modules/ipfs-core-utils/esm/src/multibases.js"],"sourcesContent":["const LOAD_BASE = name => Promise.reject(new Error(`No base found for \"${ name }\"`));\r\nexport class Multibases {\r\n  constructor(options) {\r\n    this._basesByName = {};\r\n    this._basesByPrefix = {};\r\n    this._loadBase = options.loadBase || LOAD_BASE;\r\n    for (const base of options.bases) {\r\n      this.addBase(base);\r\n    }\r\n  }\r\n  addBase(base) {\r\n    if (this._basesByName[base.name] || this._basesByPrefix[base.prefix]) {\r\n      throw new Error(`Codec already exists for codec \"${ base.name }\"`);\r\n    }\r\n    this._basesByName[base.name] = base;\r\n    this._basesByPrefix[base.prefix] = base;\r\n  }\r\n  removeBase(base) {\r\n    delete this._basesByName[base.name];\r\n    delete this._basesByPrefix[base.prefix];\r\n  }\r\n  async getBase(nameOrPrefix) {\r\n    if (this._basesByName[nameOrPrefix]) {\r\n      return this._basesByName[nameOrPrefix];\r\n    }\r\n    if (this._basesByPrefix[nameOrPrefix]) {\r\n      return this._basesByPrefix[nameOrPrefix];\r\n    }\r\n    const base = await this._loadBase(nameOrPrefix);\r\n    if (this._basesByName[base.name] == null && this._basesByPrefix[base.prefix] == null) {\r\n      this.addBase(base);\r\n    }\r\n    return base;\r\n  }\r\n  listBases() {\r\n    return Object.values(this._basesByName);\r\n  }\r\n}"],"mappings":"AAAA,MAAMA,SAAS,GAAGC,IAAI,IAAIC,OAAO,CAACC,MAAR,CAAe,IAAIC,KAAJ,CAAW,sBAAsBH,IAAM,GAAvC,CAAf,CAA1B;;AACA,OAAO,MAAMI,UAAN,CAAiB;EACtBC,WAAW,CAACC,OAAD,EAAU;IACnB,KAAKC,YAAL,GAAoB,EAApB;IACA,KAAKC,cAAL,GAAsB,EAAtB;IACA,KAAKC,SAAL,GAAiBH,OAAO,CAACI,QAAR,IAAoBX,SAArC;;IACA,KAAK,MAAMY,IAAX,IAAmBL,OAAO,CAACM,KAA3B,EAAkC;MAChC,KAAKC,OAAL,CAAaF,IAAb;IACD;EACF;;EACDE,OAAO,CAACF,IAAD,EAAO;IACZ,IAAI,KAAKJ,YAAL,CAAkBI,IAAI,CAACX,IAAvB,KAAgC,KAAKQ,cAAL,CAAoBG,IAAI,CAACG,MAAzB,CAApC,EAAsE;MACpE,MAAM,IAAIX,KAAJ,CAAW,mCAAmCQ,IAAI,CAACX,IAAM,GAAzD,CAAN;IACD;;IACD,KAAKO,YAAL,CAAkBI,IAAI,CAACX,IAAvB,IAA+BW,IAA/B;IACA,KAAKH,cAAL,CAAoBG,IAAI,CAACG,MAAzB,IAAmCH,IAAnC;EACD;;EACDI,UAAU,CAACJ,IAAD,EAAO;IACf,OAAO,KAAKJ,YAAL,CAAkBI,IAAI,CAACX,IAAvB,CAAP;IACA,OAAO,KAAKQ,cAAL,CAAoBG,IAAI,CAACG,MAAzB,CAAP;EACD;;EACY,MAAPE,OAAO,CAACC,YAAD,EAAe;IAC1B,IAAI,KAAKV,YAAL,CAAkBU,YAAlB,CAAJ,EAAqC;MACnC,OAAO,KAAKV,YAAL,CAAkBU,YAAlB,CAAP;IACD;;IACD,IAAI,KAAKT,cAAL,CAAoBS,YAApB,CAAJ,EAAuC;MACrC,OAAO,KAAKT,cAAL,CAAoBS,YAApB,CAAP;IACD;;IACD,MAAMN,IAAI,GAAG,MAAM,KAAKF,SAAL,CAAeQ,YAAf,CAAnB;;IACA,IAAI,KAAKV,YAAL,CAAkBI,IAAI,CAACX,IAAvB,KAAgC,IAAhC,IAAwC,KAAKQ,cAAL,CAAoBG,IAAI,CAACG,MAAzB,KAAoC,IAAhF,EAAsF;MACpF,KAAKD,OAAL,CAAaF,IAAb;IACD;;IACD,OAAOA,IAAP;EACD;;EACDO,SAAS,GAAG;IACV,OAAOC,MAAM,CAACC,MAAP,CAAc,KAAKb,YAAnB,CAAP;EACD;;AAnCqB"},"metadata":{},"sourceType":"module"}