{"ast":null,"code":"import { configure } from '../lib/configure.js';\nimport { resolve } from '../lib/resolve.js';\nimport first from 'it-first';\nimport last from 'it-last';\nimport errCode from 'err-code';\nimport { createGet as createBlockGet } from '../block/get.js';\nexport const createGet = (codecs, options) => {\n  const fn = configure((api, opts) => {\n    const getBlock = createBlockGet(opts);\n\n    const get = async function (cid) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      if (options.path) {\n        const entry = options.localResolve ? await first(resolve(cid, options.path, codecs, getBlock, options)) : await last(resolve(cid, options.path, codecs, getBlock, options));\n        const result = entry;\n\n        if (!result) {\n          throw errCode(new Error('Not found'), 'ERR_NOT_FOUND');\n        }\n\n        return result;\n      }\n\n      const codec = await codecs.getCodec(cid.code);\n      const block = await getBlock(cid, options);\n      const node = codec.decode(block);\n      return {\n        value: node,\n        remainderPath: ''\n      };\n    };\n\n    return get;\n  });\n  return fn(options);\n};","map":{"version":3,"names":["configure","resolve","first","last","errCode","createGet","createBlockGet","codecs","options","fn","api","opts","getBlock","get","cid","path","entry","localResolve","result","Error","codec","getCodec","code","block","node","decode","value","remainderPath"],"sources":["C:/Users/Ritika Mahajan/.vscode/Blockchain_Project/NFT-Marketplace/node_modules/ipfs-http-client/esm/src/dag/get.js"],"sourcesContent":["import { configure } from '../lib/configure.js';\r\nimport { resolve } from '../lib/resolve.js';\r\nimport first from 'it-first';\r\nimport last from 'it-last';\r\nimport errCode from 'err-code';\r\nimport { createGet as createBlockGet } from '../block/get.js';\r\nexport const createGet = (codecs, options) => {\r\n  const fn = configure((api, opts) => {\r\n    const getBlock = createBlockGet(opts);\r\n    const get = async (cid, options = {}) => {\r\n      if (options.path) {\r\n        const entry = options.localResolve ? await first(resolve(cid, options.path, codecs, getBlock, options)) : await last(resolve(cid, options.path, codecs, getBlock, options));\r\n        const result = entry;\r\n        if (!result) {\r\n          throw errCode(new Error('Not found'), 'ERR_NOT_FOUND');\r\n        }\r\n        return result;\r\n      }\r\n      const codec = await codecs.getCodec(cid.code);\r\n      const block = await getBlock(cid, options);\r\n      const node = codec.decode(block);\r\n      return {\r\n        value: node,\r\n        remainderPath: ''\r\n      };\r\n    };\r\n    return get;\r\n  });\r\n  return fn(options);\r\n};"],"mappings":"AAAA,SAASA,SAAT,QAA0B,qBAA1B;AACA,SAASC,OAAT,QAAwB,mBAAxB;AACA,OAAOC,KAAP,MAAkB,UAAlB;AACA,OAAOC,IAAP,MAAiB,SAAjB;AACA,OAAOC,OAAP,MAAoB,UAApB;AACA,SAASC,SAAS,IAAIC,cAAtB,QAA4C,iBAA5C;AACA,OAAO,MAAMD,SAAS,GAAG,CAACE,MAAD,EAASC,OAAT,KAAqB;EAC5C,MAAMC,EAAE,GAAGT,SAAS,CAAC,CAACU,GAAD,EAAMC,IAAN,KAAe;IAClC,MAAMC,QAAQ,GAAGN,cAAc,CAACK,IAAD,CAA/B;;IACA,MAAME,GAAG,GAAG,gBAAOC,GAAP,EAA6B;MAAA,IAAjBN,OAAiB,uEAAP,EAAO;;MACvC,IAAIA,OAAO,CAACO,IAAZ,EAAkB;QAChB,MAAMC,KAAK,GAAGR,OAAO,CAACS,YAAR,GAAuB,MAAMf,KAAK,CAACD,OAAO,CAACa,GAAD,EAAMN,OAAO,CAACO,IAAd,EAAoBR,MAApB,EAA4BK,QAA5B,EAAsCJ,OAAtC,CAAR,CAAlC,GAA4F,MAAML,IAAI,CAACF,OAAO,CAACa,GAAD,EAAMN,OAAO,CAACO,IAAd,EAAoBR,MAApB,EAA4BK,QAA5B,EAAsCJ,OAAtC,CAAR,CAApH;QACA,MAAMU,MAAM,GAAGF,KAAf;;QACA,IAAI,CAACE,MAAL,EAAa;UACX,MAAMd,OAAO,CAAC,IAAIe,KAAJ,CAAU,WAAV,CAAD,EAAyB,eAAzB,CAAb;QACD;;QACD,OAAOD,MAAP;MACD;;MACD,MAAME,KAAK,GAAG,MAAMb,MAAM,CAACc,QAAP,CAAgBP,GAAG,CAACQ,IAApB,CAApB;MACA,MAAMC,KAAK,GAAG,MAAMX,QAAQ,CAACE,GAAD,EAAMN,OAAN,CAA5B;MACA,MAAMgB,IAAI,GAAGJ,KAAK,CAACK,MAAN,CAAaF,KAAb,CAAb;MACA,OAAO;QACLG,KAAK,EAAEF,IADF;QAELG,aAAa,EAAE;MAFV,CAAP;IAID,CAhBD;;IAiBA,OAAOd,GAAP;EACD,CApBmB,CAApB;EAqBA,OAAOJ,EAAE,CAACD,OAAD,CAAT;AACD,CAvBM"},"metadata":{},"sourceType":"module"}