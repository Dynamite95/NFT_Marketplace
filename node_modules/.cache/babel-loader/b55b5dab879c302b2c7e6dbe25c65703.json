{"ast":null,"code":"import { CID } from 'multiformats/cid';\nimport { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\n\nfunction toPin(type, cid, metadata) {\n  const pin = {\n    type,\n    cid: CID.parse(cid)\n  };\n\n  if (metadata) {\n    pin.metadata = metadata;\n  }\n\n  return pin;\n}\n\nexport const createLs = configure(api => {\n  async function* ls() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let paths = [];\n\n    if (options.paths) {\n      paths = Array.isArray(options.paths) ? options.paths : [options.paths];\n    }\n\n    const res = await api.post('pin/ls', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({ ...options,\n        arg: paths.map(path => `${path}`),\n        stream: true\n      }),\n      headers: options.headers\n    });\n\n    for await (const pin of res.ndjson()) {\n      if (pin.Keys) {\n        for (const cid of Object.keys(pin.Keys)) {\n          yield toPin(pin.Keys[cid].Type, cid, pin.Keys[cid].Metadata);\n        }\n\n        return;\n      }\n\n      yield toPin(pin.Type, pin.Cid, pin.Metadata);\n    }\n  }\n\n  return ls;\n});","map":{"version":3,"names":["CID","configure","toUrlSearchParams","toPin","type","cid","metadata","pin","parse","createLs","api","ls","options","paths","Array","isArray","res","post","signal","searchParams","arg","map","path","stream","headers","ndjson","Keys","Object","keys","Type","Metadata","Cid"],"sources":["C:/Users/Ritika Mahajan/.vscode/Blockchain_Project/NFT-Marketplace/node_modules/ipfs-http-client/esm/src/pin/ls.js"],"sourcesContent":["import { CID } from 'multiformats/cid';\r\nimport { configure } from '../lib/configure.js';\r\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\r\nfunction toPin(type, cid, metadata) {\r\n  const pin = {\r\n    type,\r\n    cid: CID.parse(cid)\r\n  };\r\n  if (metadata) {\r\n    pin.metadata = metadata;\r\n  }\r\n  return pin;\r\n}\r\nexport const createLs = configure(api => {\r\n  async function* ls(options = {}) {\r\n    let paths = [];\r\n    if (options.paths) {\r\n      paths = Array.isArray(options.paths) ? options.paths : [options.paths];\r\n    }\r\n    const res = await api.post('pin/ls', {\r\n      signal: options.signal,\r\n      searchParams: toUrlSearchParams({\r\n        ...options,\r\n        arg: paths.map(path => `${ path }`),\r\n        stream: true\r\n      }),\r\n      headers: options.headers\r\n    });\r\n    for await (const pin of res.ndjson()) {\r\n      if (pin.Keys) {\r\n        for (const cid of Object.keys(pin.Keys)) {\r\n          yield toPin(pin.Keys[cid].Type, cid, pin.Keys[cid].Metadata);\r\n        }\r\n        return;\r\n      }\r\n      yield toPin(pin.Type, pin.Cid, pin.Metadata);\r\n    }\r\n  }\r\n  return ls;\r\n});"],"mappings":"AAAA,SAASA,GAAT,QAAoB,kBAApB;AACA,SAASC,SAAT,QAA0B,qBAA1B;AACA,SAASC,iBAAT,QAAkC,gCAAlC;;AACA,SAASC,KAAT,CAAeC,IAAf,EAAqBC,GAArB,EAA0BC,QAA1B,EAAoC;EAClC,MAAMC,GAAG,GAAG;IACVH,IADU;IAEVC,GAAG,EAAEL,GAAG,CAACQ,KAAJ,CAAUH,GAAV;EAFK,CAAZ;;EAIA,IAAIC,QAAJ,EAAc;IACZC,GAAG,CAACD,QAAJ,GAAeA,QAAf;EACD;;EACD,OAAOC,GAAP;AACD;;AACD,OAAO,MAAME,QAAQ,GAAGR,SAAS,CAACS,GAAG,IAAI;EACvC,gBAAgBC,EAAhB,GAAiC;IAAA,IAAdC,OAAc,uEAAJ,EAAI;IAC/B,IAAIC,KAAK,GAAG,EAAZ;;IACA,IAAID,OAAO,CAACC,KAAZ,EAAmB;MACjBA,KAAK,GAAGC,KAAK,CAACC,OAAN,CAAcH,OAAO,CAACC,KAAtB,IAA+BD,OAAO,CAACC,KAAvC,GAA+C,CAACD,OAAO,CAACC,KAAT,CAAvD;IACD;;IACD,MAAMG,GAAG,GAAG,MAAMN,GAAG,CAACO,IAAJ,CAAS,QAAT,EAAmB;MACnCC,MAAM,EAAEN,OAAO,CAACM,MADmB;MAEnCC,YAAY,EAAEjB,iBAAiB,CAAC,EAC9B,GAAGU,OAD2B;QAE9BQ,GAAG,EAAEP,KAAK,CAACQ,GAAN,CAAUC,IAAI,IAAK,GAAGA,IAAM,EAA5B,CAFyB;QAG9BC,MAAM,EAAE;MAHsB,CAAD,CAFI;MAOnCC,OAAO,EAAEZ,OAAO,CAACY;IAPkB,CAAnB,CAAlB;;IASA,WAAW,MAAMjB,GAAjB,IAAwBS,GAAG,CAACS,MAAJ,EAAxB,EAAsC;MACpC,IAAIlB,GAAG,CAACmB,IAAR,EAAc;QACZ,KAAK,MAAMrB,GAAX,IAAkBsB,MAAM,CAACC,IAAP,CAAYrB,GAAG,CAACmB,IAAhB,CAAlB,EAAyC;UACvC,MAAMvB,KAAK,CAACI,GAAG,CAACmB,IAAJ,CAASrB,GAAT,EAAcwB,IAAf,EAAqBxB,GAArB,EAA0BE,GAAG,CAACmB,IAAJ,CAASrB,GAAT,EAAcyB,QAAxC,CAAX;QACD;;QACD;MACD;;MACD,MAAM3B,KAAK,CAACI,GAAG,CAACsB,IAAL,EAAWtB,GAAG,CAACwB,GAAf,EAAoBxB,GAAG,CAACuB,QAAxB,CAAX;IACD;EACF;;EACD,OAAOnB,EAAP;AACD,CA1BgC,CAA1B"},"metadata":{},"sourceType":"module"}