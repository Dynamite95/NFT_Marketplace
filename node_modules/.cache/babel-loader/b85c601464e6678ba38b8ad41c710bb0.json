{"ast":null,"code":"var _jsxFileName = \"E:\\\\blockchain_project\\\\nft_marketplace\\\\src\\\\frontend\\\\components\\\\Create.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport { ethers } from \"ethers\";\nimport { Row, Form, Button } from 'react-bootstrap';\nimport { create as ipfsHttpClient } from 'ipfs-http-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst client = ipfsHttpClient('https://ipfs.infura.io:5001/api/v0');\n\nconst Create = _ref => {\n  _s();\n\n  let {\n    marketplace,\n    nft\n  } = _ref;\n  const [image, setImage] = useState('');\n  const [price, setPrice] = useState(null);\n  const [name, setName] = useState('');\n  const [description, setDescription] = useState('');\n\n  const uploadToIPFS = async event => {\n    event.preventDefault();\n    const file = event.target.files[0];\n\n    if (typeof file !== 'undefined') {\n      try {\n        const result = await client.add(file); // console.log(result)\n\n        setImage(`https://ipfs.infura.io/ipfs/${result.path}`);\n      } catch (error) {\n        console.log(\"ipfs image upload error: \", error);\n      }\n    }\n  };\n\n  const createNFT = async () => {\n    if (!image || !price || !name || !description) return;\n\n    try {\n      console.log(\"clicked\");\n      const result = await client.add(JSON.stringify({\n        image,\n        price,\n        name,\n        description\n      })); //console.log(result,\"clicked\")\n\n      mintThenList(result);\n    } catch (error) {\n      console.log(\"ipfs uri upload error: \", error);\n    }\n  };\n\n  const mintThenList = async result => {\n    const uri = `https://ipfs.infura.io/ipfs/${result.path}`; // mint nft \n\n    await (await nft.mint(uri)).wait(); // get tokenId of new nft \n\n    const id = await nft.tokenCount(); // approve marketplace to spend nft\n\n    await (await nft.setApprovalForAll(marketplace.address, true)).wait(); // add nft to marketplace\n\n    const listingPrice = ethers.utils.parseEther(price.toString());\n    await (await marketplace.makeItem(nft.address, id, listingPrice)).wait();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container-fluid mt-5\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: /*#__PURE__*/_jsxDEV(\"main\", {\n        role: \"main\",\n        className: \"col-lg-12 mx-auto\",\n        style: {\n          maxWidth: '1000px'\n        },\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"content mx-auto\",\n          children: /*#__PURE__*/_jsxDEV(Row, {\n            className: \"g-4\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"file\",\n              required: true,\n              name: \"file\",\n              onChange: uploadToIPFS\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 55,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              onChange: e => setName(e.target.value),\n              size: \"lg\",\n              required: true,\n              type: \"text\",\n              placeholder: \"Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 61,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              onChange: e => setDescription(e.target.value),\n              size: \"lg\",\n              required: true,\n              as: \"textarea\",\n              placeholder: \"Description\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              onChange: e => setPrice(e.target.value),\n              size: \"lg\",\n              required: true,\n              type: \"number\",\n              placeholder: \"Price in ETH\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 63,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"d-grid px-0\",\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                onClick: createNFT,\n                variant: \"primary\",\n                size: \"lg\",\n                children: \"Create & List NFT!\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 65,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Create, \"CejF301mm3S45QBEXO/SVXCwDzQ=\");\n\n_c = Create;\nexport default Create;\n\nvar _c;\n\n$RefreshReg$(_c, \"Create\");","map":{"version":3,"names":["useState","ethers","Row","Form","Button","create","ipfsHttpClient","client","Create","marketplace","nft","image","setImage","price","setPrice","name","setName","description","setDescription","uploadToIPFS","event","preventDefault","file","target","files","result","add","path","error","console","log","createNFT","JSON","stringify","mintThenList","uri","mint","wait","id","tokenCount","setApprovalForAll","address","listingPrice","utils","parseEther","toString","makeItem","maxWidth","e","value"],"sources":["E:/blockchain_project/nft_marketplace/src/frontend/components/Create.js"],"sourcesContent":["import { useState } from 'react'\r\nimport { ethers } from \"ethers\"\r\nimport { Row, Form, Button } from 'react-bootstrap'\r\nimport { create as ipfsHttpClient } from 'ipfs-http-client'\r\nconst client = ipfsHttpClient('https://ipfs.infura.io:5001/api/v0')\r\n\r\nconst Create = ({ marketplace, nft }) => {\r\n  const [image, setImage] = useState('')\r\n  const [price, setPrice] = useState(null)\r\n  const [name, setName] = useState('')\r\n  const [description, setDescription] = useState('')\r\n  const uploadToIPFS = async (event) => {\r\n    event.preventDefault()\r\n    const file = event.target.files[0]\r\n    if (typeof file !== 'undefined') {\r\n      try {\r\n        const result = await client.add(file)\r\n       // console.log(result)\r\n        setImage(`https://ipfs.infura.io/ipfs/${result.path}`)\r\n      } catch (error){\r\n        console.log(\"ipfs image upload error: \", error)\r\n      }\r\n    }\r\n  }\r\n  const createNFT = async () => {\r\n    \r\n    if (!image || !price || !name || !description) return\r\n    try{\r\n      console.log(\"clicked\")\r\n      const result = await client.add(JSON.stringify({image, price, name, description}))\r\n      //console.log(result,\"clicked\")\r\n      mintThenList(result)\r\n    } catch(error) {\r\n      console.log(\"ipfs uri upload error: \", error)\r\n    }\r\n  }\r\n  const mintThenList = async (result) => {\r\n    const uri = `https://ipfs.infura.io/ipfs/${result.path}`\r\n    // mint nft \r\n    await(await nft.mint(uri)).wait()\r\n    // get tokenId of new nft \r\n    const id = await nft.tokenCount()\r\n    // approve marketplace to spend nft\r\n    await(await nft.setApprovalForAll(marketplace.address, true)).wait()\r\n    // add nft to marketplace\r\n    const listingPrice = ethers.utils.parseEther(price.toString())\r\n    await(await marketplace.makeItem(nft.address, id, listingPrice)).wait()\r\n  }\r\n  return (\r\n    <div className=\"container-fluid mt-5\">\r\n      <div className=\"row\">\r\n        <main role=\"main\" className=\"col-lg-12 mx-auto\" style={{ maxWidth: '1000px' }}>\r\n          <div className=\"content mx-auto\">\r\n            <Row className=\"g-4\">\r\n              <Form.Control\r\n                type=\"file\"\r\n                required\r\n                name=\"file\"\r\n                onChange={uploadToIPFS}\r\n              />\r\n              <Form.Control onChange={(e) => setName(e.target.value)} size=\"lg\" required type=\"text\" placeholder=\"Name\" />\r\n              <Form.Control onChange={(e) => setDescription(e.target.value)} size=\"lg\" required as=\"textarea\" placeholder=\"Description\" />\r\n              <Form.Control onChange={(e) => setPrice(e.target.value)} size=\"lg\" required type=\"number\" placeholder=\"Price in ETH\" />\r\n              <div className=\"d-grid px-0\">\r\n                <Button onClick={createNFT} variant=\"primary\" size=\"lg\">\r\n                  Create & List NFT!\r\n                </Button>\r\n              </div>\r\n            </Row>\r\n          </div>\r\n        </main>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Create"],"mappings":"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"},"metadata":{},"sourceType":"module"}