{"ast":null,"code":"import { coerce, equals as equalBytes } from '../bytes.js';\nimport * as varint from '../varint.js';\nexport const create = (code, digest) => {\n  const size = digest.byteLength;\n  const sizeOffset = varint.encodingLength(code);\n  const digestOffset = sizeOffset + varint.encodingLength(size);\n  const bytes = new Uint8Array(digestOffset + size);\n  varint.encodeTo(code, bytes, 0);\n  varint.encodeTo(size, bytes, sizeOffset);\n  bytes.set(digest, digestOffset);\n  return new Digest(code, size, digest, bytes);\n};\nexport const decode = multihash => {\n  const bytes = coerce(multihash);\n  const [code, sizeOffset] = varint.decode(bytes);\n  const [size, digestOffset] = varint.decode(bytes.subarray(sizeOffset));\n  const digest = bytes.subarray(sizeOffset + digestOffset);\n\n  if (digest.byteLength !== size) {\n    throw new Error('Incorrect length');\n  }\n\n  return new Digest(code, size, digest, bytes);\n};\nexport const equals = (a, b) => {\n  if (a === b) {\n    return true;\n  } else {\n    return a.code === b.code && a.size === b.size && equalBytes(a.bytes, b.bytes);\n  }\n};\nexport class Digest {\n  constructor(code, size, digest, bytes) {\n    this.code = code;\n    this.size = size;\n    this.digest = digest;\n    this.bytes = bytes;\n  }\n\n}","map":{"version":3,"names":["coerce","equals","equalBytes","varint","create","code","digest","size","byteLength","sizeOffset","encodingLength","digestOffset","bytes","Uint8Array","encodeTo","set","Digest","decode","multihash","subarray","Error","a","b","constructor"],"sources":["C:/Users/Ritika Mahajan/.vscode/Blockchain_Project/NFT-Marketplace/node_modules/multiformats/esm/src/hashes/digest.js"],"sourcesContent":["import {\r\n  coerce,\r\n  equals as equalBytes\r\n} from '../bytes.js';\r\nimport * as varint from '../varint.js';\r\nexport const create = (code, digest) => {\r\n  const size = digest.byteLength;\r\n  const sizeOffset = varint.encodingLength(code);\r\n  const digestOffset = sizeOffset + varint.encodingLength(size);\r\n  const bytes = new Uint8Array(digestOffset + size);\r\n  varint.encodeTo(code, bytes, 0);\r\n  varint.encodeTo(size, bytes, sizeOffset);\r\n  bytes.set(digest, digestOffset);\r\n  return new Digest(code, size, digest, bytes);\r\n};\r\nexport const decode = multihash => {\r\n  const bytes = coerce(multihash);\r\n  const [code, sizeOffset] = varint.decode(bytes);\r\n  const [size, digestOffset] = varint.decode(bytes.subarray(sizeOffset));\r\n  const digest = bytes.subarray(sizeOffset + digestOffset);\r\n  if (digest.byteLength !== size) {\r\n    throw new Error('Incorrect length');\r\n  }\r\n  return new Digest(code, size, digest, bytes);\r\n};\r\nexport const equals = (a, b) => {\r\n  if (a === b) {\r\n    return true;\r\n  } else {\r\n    return a.code === b.code && a.size === b.size && equalBytes(a.bytes, b.bytes);\r\n  }\r\n};\r\nexport class Digest {\r\n  constructor(code, size, digest, bytes) {\r\n    this.code = code;\r\n    this.size = size;\r\n    this.digest = digest;\r\n    this.bytes = bytes;\r\n  }\r\n}"],"mappings":"AAAA,SACEA,MADF,EAEEC,MAAM,IAAIC,UAFZ,QAGO,aAHP;AAIA,OAAO,KAAKC,MAAZ,MAAwB,cAAxB;AACA,OAAO,MAAMC,MAAM,GAAG,CAACC,IAAD,EAAOC,MAAP,KAAkB;EACtC,MAAMC,IAAI,GAAGD,MAAM,CAACE,UAApB;EACA,MAAMC,UAAU,GAAGN,MAAM,CAACO,cAAP,CAAsBL,IAAtB,CAAnB;EACA,MAAMM,YAAY,GAAGF,UAAU,GAAGN,MAAM,CAACO,cAAP,CAAsBH,IAAtB,CAAlC;EACA,MAAMK,KAAK,GAAG,IAAIC,UAAJ,CAAeF,YAAY,GAAGJ,IAA9B,CAAd;EACAJ,MAAM,CAACW,QAAP,CAAgBT,IAAhB,EAAsBO,KAAtB,EAA6B,CAA7B;EACAT,MAAM,CAACW,QAAP,CAAgBP,IAAhB,EAAsBK,KAAtB,EAA6BH,UAA7B;EACAG,KAAK,CAACG,GAAN,CAAUT,MAAV,EAAkBK,YAAlB;EACA,OAAO,IAAIK,MAAJ,CAAWX,IAAX,EAAiBE,IAAjB,EAAuBD,MAAvB,EAA+BM,KAA/B,CAAP;AACD,CATM;AAUP,OAAO,MAAMK,MAAM,GAAGC,SAAS,IAAI;EACjC,MAAMN,KAAK,GAAGZ,MAAM,CAACkB,SAAD,CAApB;EACA,MAAM,CAACb,IAAD,EAAOI,UAAP,IAAqBN,MAAM,CAACc,MAAP,CAAcL,KAAd,CAA3B;EACA,MAAM,CAACL,IAAD,EAAOI,YAAP,IAAuBR,MAAM,CAACc,MAAP,CAAcL,KAAK,CAACO,QAAN,CAAeV,UAAf,CAAd,CAA7B;EACA,MAAMH,MAAM,GAAGM,KAAK,CAACO,QAAN,CAAeV,UAAU,GAAGE,YAA5B,CAAf;;EACA,IAAIL,MAAM,CAACE,UAAP,KAAsBD,IAA1B,EAAgC;IAC9B,MAAM,IAAIa,KAAJ,CAAU,kBAAV,CAAN;EACD;;EACD,OAAO,IAAIJ,MAAJ,CAAWX,IAAX,EAAiBE,IAAjB,EAAuBD,MAAvB,EAA+BM,KAA/B,CAAP;AACD,CATM;AAUP,OAAO,MAAMX,MAAM,GAAG,CAACoB,CAAD,EAAIC,CAAJ,KAAU;EAC9B,IAAID,CAAC,KAAKC,CAAV,EAAa;IACX,OAAO,IAAP;EACD,CAFD,MAEO;IACL,OAAOD,CAAC,CAAChB,IAAF,KAAWiB,CAAC,CAACjB,IAAb,IAAqBgB,CAAC,CAACd,IAAF,KAAWe,CAAC,CAACf,IAAlC,IAA0CL,UAAU,CAACmB,CAAC,CAACT,KAAH,EAAUU,CAAC,CAACV,KAAZ,CAA3D;EACD;AACF,CANM;AAOP,OAAO,MAAMI,MAAN,CAAa;EAClBO,WAAW,CAAClB,IAAD,EAAOE,IAAP,EAAaD,MAAb,EAAqBM,KAArB,EAA4B;IACrC,KAAKP,IAAL,GAAYA,IAAZ;IACA,KAAKE,IAAL,GAAYA,IAAZ;IACA,KAAKD,MAAL,GAAcA,MAAd;IACA,KAAKM,KAAL,GAAaA,KAAb;EACD;;AANiB"},"metadata":{},"sourceType":"module"}