{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decode = exports.encode = exports.toGeneral = exports.code = exports.name = void 0;\n\nconst signing_1 = __importDefault(require(\"./signing\"));\n\nconst encryption_1 = __importDefault(require(\"./encryption\"));\n\nconst cbor = __importStar(require(\"@ipld/dag-cbor\"));\n\nexports.name = 'dag-jose';\nexports.code = 133;\n\nfunction isDagJWS(jose) {\n  return 'payload' in jose && typeof jose.payload === 'string' && 'signatures' in jose && Array.isArray(jose.signatures);\n}\n\nfunction isEncodedJWS(jose) {\n  return 'payload' in jose && jose.payload instanceof Uint8Array && 'signatures' in jose && Array.isArray(jose.signatures);\n}\n\nfunction isEncodedJWE(jose) {\n  return 'ciphertext' in jose && jose.ciphertext instanceof Uint8Array && 'iv' in jose && jose.iv instanceof Uint8Array && 'protected' in jose && jose.protected instanceof Uint8Array && 'tag' in jose && jose.tag instanceof Uint8Array;\n}\n\nfunction isDagJWE(jose) {\n  return 'ciphertext' in jose && typeof jose.ciphertext === 'string' && 'iv' in jose && typeof jose.iv === 'string' && 'protected' in jose && typeof jose.protected === 'string' && 'tag' in jose && typeof jose.tag === 'string';\n}\n\nfunction toGeneral(jose) {\n  if (typeof jose === 'string') {\n    const split = jose.split('.');\n\n    if (split.length === 3) {\n      return signing_1.default.fromSplit(split);\n    } else if (split.length === 5) {\n      return encryption_1.default.fromSplit(split);\n    }\n\n    throw new Error('Not a valid JOSE string');\n  }\n\n  if (isDagJWS(jose) || isDagJWE(jose)) {\n    return jose;\n  }\n\n  throw new Error('Not a valid unencoded JOSE object');\n}\n\nexports.toGeneral = toGeneral;\n\nfunction encode(obj) {\n  if (typeof obj === 'string') {\n    obj = toGeneral(obj);\n  }\n\n  let encodedJose;\n\n  if (isDagJWS(obj)) {\n    encodedJose = signing_1.default.encode(obj);\n  } else if (isDagJWE(obj)) {\n    encodedJose = encryption_1.default.encode(obj);\n  } else {\n    throw new Error('Not a valid JOSE object');\n  }\n\n  return new Uint8Array(cbor.encode(encodedJose));\n}\n\nexports.encode = encode;\n\nfunction decode(data) {\n  let encoded;\n\n  try {\n    encoded = cbor.decode(data);\n  } catch (e) {\n    throw new Error('Not a valid DAG-JOSE object');\n  }\n\n  if (isEncodedJWS(encoded)) {\n    return signing_1.default.decode(encoded);\n  } else if (isEncodedJWE(encoded)) {\n    return encryption_1.default.decode(encoded);\n  } else {\n    throw new Error('Not a valid DAG-JOSE object');\n  }\n}\n\nexports.decode = decode;","map":{"version":3,"mappings":"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","names":["exports","isDagJWS","jose","payload","Array","isArray","signatures","isEncodedJWS","Uint8Array","isEncodedJWE","ciphertext","iv","protected","tag","isDagJWE","toGeneral","split","length","signing_1","fromSplit","encryption_1","Error","encode","obj","encodedJose","cbor","decode","data","encoded","e"],"sources":["C:\\Users\\Ritika Mahajan\\.vscode\\Blockchain_Project\\NFT-Marketplace\\node_modules\\dag-jose\\src\\index.ts"],"sourcesContent":["import signing, { DagJWS, EncodedJWS } from './signing'\r\nexport type { DagJWS } from './signing'\r\nimport encryption, { DagJWE, EncodedJWE } from './encryption'\r\nexport type { DagJWE } from './encryption'\r\nimport * as cbor from '@ipld/dag-cbor'\r\nimport type { ByteView } from 'multiformats/codecs/interface'\r\n\r\n// string name of the codec\r\nexport const name = 'dag-jose'\r\n\r\n// integer for the multiformat entry of the codec\r\nexport const code = 133 // 0x85 https://github.com/multiformats/multicodec/blob/master/table.csv\r\n\r\nfunction isDagJWS(jose: DagJWS | DagJWE | EncodedJWS | EncodedJWE): jose is DagJWS | EncodedJWS {\r\n  return (\r\n    'payload' in jose &&\r\n    typeof jose.payload === 'string' &&\r\n    'signatures' in jose &&\r\n    Array.isArray(jose.signatures)\r\n  )\r\n}\r\n\r\nfunction isEncodedJWS(\r\n  jose: DagJWS | DagJWE | EncodedJWS | EncodedJWE\r\n): jose is DagJWS | EncodedJWS {\r\n  return (\r\n    'payload' in jose &&\r\n    jose.payload instanceof Uint8Array &&\r\n    'signatures' in jose &&\r\n    Array.isArray(jose.signatures)\r\n  )\r\n}\r\n\r\nfunction isEncodedJWE(\r\n  jose: DagJWS | DagJWE | EncodedJWS | EncodedJWE\r\n): jose is DagJWE | EncodedJWE {\r\n  return (\r\n    'ciphertext' in jose &&\r\n    jose.ciphertext instanceof Uint8Array &&\r\n    'iv' in jose &&\r\n    jose.iv instanceof Uint8Array &&\r\n    'protected' in jose &&\r\n    jose.protected instanceof Uint8Array &&\r\n    'tag' in jose &&\r\n    jose.tag instanceof Uint8Array\r\n  )\r\n}\r\n\r\nfunction isDagJWE(jose: DagJWS | DagJWE | EncodedJWS | EncodedJWE): jose is DagJWE | EncodedJWE {\r\n  return (\r\n    'ciphertext' in jose &&\r\n    typeof jose.ciphertext === 'string' &&\r\n    'iv' in jose &&\r\n    typeof jose.iv === 'string' &&\r\n    'protected' in jose &&\r\n    typeof jose.protected === 'string' &&\r\n    'tag' in jose &&\r\n    typeof jose.tag === 'string'\r\n  )\r\n}\r\n\r\n/**\r\n * Create a properly formed DagJWS or DagJWE object, from either a DagJWS, or\r\n * DagJWE or the compact string form of either.\r\n * Applying this function on an already valid DagJWS or DagJWE object will be\r\n * idempotent. So this function can be used to either verify the proper object\r\n * form, or expand a compact string form and ensure you have the same form\r\n * of object that you would receive if you performed a round-trip encode/decode.\r\n */\r\nexport function toGeneral(jose: DagJWS | DagJWE | string): DagJWS | DagJWE {\r\n  if (typeof jose === 'string') {\r\n    const split = jose.split('.')\r\n    if (split.length === 3) {\r\n      return signing.fromSplit(split)\r\n    } else if (split.length === 5) {\r\n      return encryption.fromSplit(split)\r\n    }\r\n    throw new Error('Not a valid JOSE string')\r\n  }\r\n  if (isDagJWS(jose) || isDagJWE(jose)) {\r\n    return jose\r\n  }\r\n  throw new Error('Not a valid unencoded JOSE object')\r\n}\r\n\r\nexport function encode(obj: DagJWS | DagJWE | string): ByteView<EncodedJWS | EncodedJWE> {\r\n  if (typeof obj === 'string') {\r\n    obj = toGeneral(obj)\r\n  }\r\n  let encodedJose\r\n  if (isDagJWS(obj)) {\r\n    encodedJose = signing.encode(obj)\r\n  } else if (isDagJWE(obj)) {\r\n    encodedJose = encryption.encode(obj)\r\n  } else {\r\n    throw new Error('Not a valid JOSE object')\r\n  }\r\n  return new Uint8Array(cbor.encode(encodedJose))\r\n}\r\n\r\nexport function decode(data: ByteView<EncodedJWS | EncodedJWE>): DagJWS | DagJWE {\r\n  let encoded: EncodedJWS | EncodedJWE\r\n  try {\r\n    encoded = cbor.decode(data)\r\n  } catch (e) {\r\n    throw new Error('Not a valid DAG-JOSE object')\r\n  }\r\n  if (isEncodedJWS(encoded)) {\r\n    return signing.decode(encoded)\r\n  } else if (isEncodedJWE(encoded)) {\r\n    return encryption.decode(encoded)\r\n  } else {\r\n    throw new Error('Not a valid DAG-JOSE object')\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"script"}